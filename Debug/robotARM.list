
robotARM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005950  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005ae8  08005ae8  00015ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b68  08005b68  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005b68  08005b68  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b68  08005b68  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b68  08005b68  00015b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b6c  08005b6c  00015b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005b70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000074  08005be4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08005be4  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8de  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001848  00000000  00000000  0002b982  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba8  00000000  00000000  0002d1d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae0  00000000  00000000  0002dd78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d28d  00000000  00000000  0002e858  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008d30  00000000  00000000  0004bae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000affb3  00000000  00000000  00054815  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001047c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003498  00000000  00000000  00104844  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005ad0 	.word	0x08005ad0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08005ad0 	.word	0x08005ad0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_d2f>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b18:	bf24      	itt	cs
 8000b1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b22:	d90d      	bls.n	8000b40 <__aeabi_d2f+0x30>
 8000b24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b38:	bf08      	it	eq
 8000b3a:	f020 0001 	biceq.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b44:	d121      	bne.n	8000b8a <__aeabi_d2f+0x7a>
 8000b46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4a:	bfbc      	itt	lt
 8000b4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	4770      	bxlt	lr
 8000b52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5a:	f1c2 0218 	rsb	r2, r2, #24
 8000b5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b66:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6a:	bf18      	it	ne
 8000b6c:	f040 0001 	orrne.w	r0, r0, #1
 8000b70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b7c:	ea40 000c 	orr.w	r0, r0, ip
 8000b80:	fa23 f302 	lsr.w	r3, r3, r2
 8000b84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b88:	e7cc      	b.n	8000b24 <__aeabi_d2f+0x14>
 8000b8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8e:	d107      	bne.n	8000ba0 <__aeabi_d2f+0x90>
 8000b90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b94:	bf1e      	ittt	ne
 8000b96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9e:	4770      	bxne	lr
 8000ba0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb6:	f000 fdef 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bba:	f000 f841 	bl	8000c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bbe:	f000 fa07 	bl	8000fd0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000bc2:	f000 f89b 	bl	8000cfc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000bc6:	f000 f951 	bl	8000e6c <MX_TIM2_Init>
  MX_UART5_Init();
 8000bca:	f000 f9d1 	bl	8000f70 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);   //Using 2 timers with 2 channels each for 4 different servo motors
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4817      	ldr	r0, [pc, #92]	; (8000c30 <main+0x80>)
 8000bd2:	f002 fcd7 	bl	8003584 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	4815      	ldr	r0, [pc, #84]	; (8000c30 <main+0x80>)
 8000bda:	f002 fcd3 	bl	8003584 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 8000bde:	2100      	movs	r1, #0
 8000be0:	4814      	ldr	r0, [pc, #80]	; (8000c34 <main+0x84>)
 8000be2:	f002 fccf 	bl	8003584 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8000be6:	2104      	movs	r1, #4
 8000be8:	4812      	ldr	r0, [pc, #72]	; (8000c34 <main+0x84>)
 8000bea:	f002 fccb 	bl	8003584 <HAL_TIM_PWM_Start>
    /* USER CODE BEGIN 3 */
	//sprintf(msg, "%f\r\n", value);
	//HAL_UART_Transmit(&huart5, (uint8_t *) msg, 10, 100);

	//HAL_UART_Receive_IT(&huart5,(uint8_t *)&choice, sizeof(choice));
    HAL_UART_Receive_IT(&huart5, Rx_data, 1);
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4911      	ldr	r1, [pc, #68]	; (8000c38 <main+0x88>)
 8000bf2:	4812      	ldr	r0, [pc, #72]	; (8000c3c <main+0x8c>)
 8000bf4:	f003 fd50 	bl	8004698 <HAL_UART_Receive_IT>

    HAL_UART_Transmit(&huart5, Rx_data, strlen(Rx_data), 100);
 8000bf8:	480f      	ldr	r0, [pc, #60]	; (8000c38 <main+0x88>)
 8000bfa:	f7ff faed 	bl	80001d8 <strlen>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	2364      	movs	r3, #100	; 0x64
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <main+0x88>)
 8000c06:	480d      	ldr	r0, [pc, #52]	; (8000c3c <main+0x8c>)
 8000c08:	f003 fcb2 	bl	8004570 <HAL_UART_Transmit>
	int in1, in2, in3; char op;


    if (op == 'r'){
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	2b72      	cmp	r3, #114	; 0x72
 8000c10:	d104      	bne.n	8000c1c <main+0x6c>
    	calc3DSpace(in1, in2, in3);
 8000c12:	683a      	ldr	r2, [r7, #0]
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	68b8      	ldr	r0, [r7, #8]
 8000c18:	f000 faa8 	bl	800116c <calc3DSpace>
    }
    if (op == 'r'){
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	2b72      	cmp	r3, #114	; 0x72
 8000c20:	d1e5      	bne.n	8000bee <main+0x3e>
    	cartesianToRadial(in1, in2, in3);
 8000c22:	683a      	ldr	r2, [r7, #0]
 8000c24:	6879      	ldr	r1, [r7, #4]
 8000c26:	68b8      	ldr	r0, [r7, #8]
 8000c28:	f000 fba8 	bl	800137c <cartesianToRadial>
  {
 8000c2c:	e7df      	b.n	8000bee <main+0x3e>
 8000c2e:	bf00      	nop
 8000c30:	20000118 	.word	0x20000118
 8000c34:	20000158 	.word	0x20000158
 8000c38:	20000094 	.word	0x20000094
 8000c3c:	20000098 	.word	0x20000098

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b0a6      	sub	sp, #152	; 0x98
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c4a:	2228      	movs	r2, #40	; 0x28
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f004 fa1a 	bl	8005088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2258      	movs	r2, #88	; 0x58
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f004 fa0c 	bl	8005088 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c70:	2302      	movs	r3, #2
 8000c72:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c74:	2301      	movs	r3, #1
 8000c76:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c78:	2310      	movs	r3, #16
 8000c7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c84:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 f87d 	bl	8001d88 <HAL_RCC_OscConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c94:	f000 fbf8 	bl	8001488 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c98:	230f      	movs	r3, #15
 8000c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f001 ff7e 	bl	8002bb4 <HAL_RCC_ClockConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cbe:	f000 fbe3 	bl	8001488 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_TIM1
 8000cc2:	4b0d      	ldr	r3, [pc, #52]	; (8000cf8 <SystemClock_Config+0xb8>)
 8000cc4:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd2:	1d3b      	adds	r3, r7, #4
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f002 f9d7 	bl	8003088 <HAL_RCCEx_PeriphCLKConfig>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000ce0:	f000 fbd2 	bl	8001488 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000cea:	2000      	movs	r0, #0
 8000cec:	f002 f8de 	bl	8002eac <HAL_RCC_MCOConfig>
}
 8000cf0:	bf00      	nop
 8000cf2:	3798      	adds	r7, #152	; 0x98
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	00101010 	.word	0x00101010

08000cfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b09a      	sub	sp, #104	; 0x68
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
 8000d2c:	615a      	str	r2, [r3, #20]
 8000d2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	222c      	movs	r2, #44	; 0x2c
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f004 f9a6 	bl	8005088 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d3c:	4b49      	ldr	r3, [pc, #292]	; (8000e64 <MX_TIM1_Init+0x168>)
 8000d3e:	4a4a      	ldr	r2, [pc, #296]	; (8000e68 <MX_TIM1_Init+0x16c>)
 8000d40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 159;
 8000d42:	4b48      	ldr	r3, [pc, #288]	; (8000e64 <MX_TIM1_Init+0x168>)
 8000d44:	229f      	movs	r2, #159	; 0x9f
 8000d46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d48:	4b46      	ldr	r3, [pc, #280]	; (8000e64 <MX_TIM1_Init+0x168>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000d4e:	4b45      	ldr	r3, [pc, #276]	; (8000e64 <MX_TIM1_Init+0x168>)
 8000d50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d56:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <MX_TIM1_Init+0x168>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d5c:	4b41      	ldr	r3, [pc, #260]	; (8000e64 <MX_TIM1_Init+0x168>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d62:	4b40      	ldr	r3, [pc, #256]	; (8000e64 <MX_TIM1_Init+0x168>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d68:	483e      	ldr	r0, [pc, #248]	; (8000e64 <MX_TIM1_Init+0x168>)
 8000d6a:	f002 fbab 	bl	80034c4 <HAL_TIM_Base_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d74:	f000 fb88 	bl	8001488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d7e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d82:	4619      	mov	r1, r3
 8000d84:	4837      	ldr	r0, [pc, #220]	; (8000e64 <MX_TIM1_Init+0x168>)
 8000d86:	f002 fd75 	bl	8003874 <HAL_TIM_ConfigClockSource>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d90:	f000 fb7a 	bl	8001488 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d94:	4833      	ldr	r0, [pc, #204]	; (8000e64 <MX_TIM1_Init+0x168>)
 8000d96:	f002 fbc0 	bl	800351a <HAL_TIM_PWM_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000da0:	f000 fb72 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da4:	2300      	movs	r3, #0
 8000da6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000da8:	2300      	movs	r3, #0
 8000daa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000db0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000db4:	4619      	mov	r1, r3
 8000db6:	482b      	ldr	r0, [pc, #172]	; (8000e64 <MX_TIM1_Init+0x168>)
 8000db8:	f003 fa7a 	bl	80042b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000dc2:	f000 fb61 	bl	8001488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc6:	2360      	movs	r3, #96	; 0x60
 8000dc8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dde:	2300      	movs	r3, #0
 8000de0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000de2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000de6:	2200      	movs	r2, #0
 8000de8:	4619      	mov	r1, r3
 8000dea:	481e      	ldr	r0, [pc, #120]	; (8000e64 <MX_TIM1_Init+0x168>)
 8000dec:	f002 fc2a 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000df6:	f000 fb47 	bl	8001488 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000dfa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dfe:	2204      	movs	r2, #4
 8000e00:	4619      	mov	r1, r3
 8000e02:	4818      	ldr	r0, [pc, #96]	; (8000e64 <MX_TIM1_Init+0x168>)
 8000e04:	f002 fc1e 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000e0e:	f000 fb3b 	bl	8001488 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	4619      	mov	r1, r3
 8000e46:	4807      	ldr	r0, [pc, #28]	; (8000e64 <MX_TIM1_Init+0x168>)
 8000e48:	f003 fabe 	bl	80043c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000e52:	f000 fb19 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e56:	4803      	ldr	r0, [pc, #12]	; (8000e64 <MX_TIM1_Init+0x168>)
 8000e58:	f000 fb74 	bl	8001544 <HAL_TIM_MspPostInit>

}
 8000e5c:	bf00      	nop
 8000e5e:	3768      	adds	r7, #104	; 0x68
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000118 	.word	0x20000118
 8000e68:	40012c00 	.word	0x40012c00

08000e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08e      	sub	sp, #56	; 0x38
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
 8000e9a:	615a      	str	r2, [r3, #20]
 8000e9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e9e:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <MX_TIM2_Init+0x100>)
 8000ea0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8000ea6:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <MX_TIM2_Init+0x100>)
 8000ea8:	229f      	movs	r2, #159	; 0x9f
 8000eaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <MX_TIM2_Init+0x100>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <MX_TIM2_Init+0x100>)
 8000eb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eb8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eba:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <MX_TIM2_Init+0x100>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	; (8000f6c <MX_TIM2_Init+0x100>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ec6:	4829      	ldr	r0, [pc, #164]	; (8000f6c <MX_TIM2_Init+0x100>)
 8000ec8:	f002 fafc 	bl	80034c4 <HAL_TIM_Base_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ed2:	f000 fad9 	bl	8001488 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000edc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4822      	ldr	r0, [pc, #136]	; (8000f6c <MX_TIM2_Init+0x100>)
 8000ee4:	f002 fcc6 	bl	8003874 <HAL_TIM_ConfigClockSource>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000eee:	f000 facb 	bl	8001488 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ef2:	481e      	ldr	r0, [pc, #120]	; (8000f6c <MX_TIM2_Init+0x100>)
 8000ef4:	f002 fb11 	bl	800351a <HAL_TIM_PWM_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000efe:	f000 fac3 	bl	8001488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4816      	ldr	r0, [pc, #88]	; (8000f6c <MX_TIM2_Init+0x100>)
 8000f12:	f003 f9cd 	bl	80042b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f1c:	f000 fab4 	bl	8001488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f20:	2360      	movs	r3, #96	; 0x60
 8000f22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f30:	463b      	mov	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	4619      	mov	r1, r3
 8000f36:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_TIM2_Init+0x100>)
 8000f38:	f002 fb84 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f42:	f000 faa1 	bl	8001488 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f46:	463b      	mov	r3, r7
 8000f48:	2204      	movs	r2, #4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <MX_TIM2_Init+0x100>)
 8000f4e:	f002 fb79 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000f58:	f000 fa96 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <MX_TIM2_Init+0x100>)
 8000f5e:	f000 faf1 	bl	8001544 <HAL_TIM_MspPostInit>

}
 8000f62:	bf00      	nop
 8000f64:	3738      	adds	r7, #56	; 0x38
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000158 	.word	0x20000158

08000f70 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_UART5_Init+0x58>)
 8000f76:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <MX_UART5_Init+0x5c>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_UART5_Init+0x58>)
 8000f7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f80:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_UART5_Init+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000f88:	4b0f      	ldr	r3, [pc, #60]	; (8000fc8 <MX_UART5_Init+0x58>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_UART5_Init+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000f94:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_UART5_Init+0x58>)
 8000f96:	220c      	movs	r2, #12
 8000f98:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <MX_UART5_Init+0x58>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_UART5_Init+0x58>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <MX_UART5_Init+0x58>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_UART5_Init+0x58>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000fb2:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_UART5_Init+0x58>)
 8000fb4:	f003 fa8e 	bl	80044d4 <HAL_UART_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000fbe:	f000 fa63 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000098 	.word	0x20000098
 8000fcc:	40005000 	.word	0x40005000

08000fd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe6:	4b23      	ldr	r3, [pc, #140]	; (8001074 <MX_GPIO_Init+0xa4>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a22      	ldr	r2, [pc, #136]	; (8001074 <MX_GPIO_Init+0xa4>)
 8000fec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ff0:	6153      	str	r3, [r2, #20]
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <MX_GPIO_Init+0xa4>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <MX_GPIO_Init+0xa4>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <MX_GPIO_Init+0xa4>)
 8001004:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001008:	6153      	str	r3, [r2, #20]
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <MX_GPIO_Init+0xa4>)
 800100c:	695b      	ldr	r3, [r3, #20]
 800100e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <MX_GPIO_Init+0xa4>)
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	4a16      	ldr	r2, [pc, #88]	; (8001074 <MX_GPIO_Init+0xa4>)
 800101c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001020:	6153      	str	r3, [r2, #20]
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <MX_GPIO_Init+0xa4>)
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_GPIO_Init+0xa4>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	4a10      	ldr	r2, [pc, #64]	; (8001074 <MX_GPIO_Init+0xa4>)
 8001034:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001038:	6153      	str	r3, [r2, #20]
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <MX_GPIO_Init+0xa4>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_TRACE;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f000 fd05 	bl	8001a74 <HAL_GPIO_Init>

}
 800106a:	bf00      	nop
 800106c:	3728      	adds	r7, #40	; 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000

08001078 <Move_Motor>:

/* USER CODE BEGIN 4 */
void Move_Motor(char choice, int distance)  //distance factoring needs to done post physical testing
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  switch(choice){
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	3b62      	subs	r3, #98	; 0x62
 8001088:	2b13      	cmp	r3, #19
 800108a:	d868      	bhi.n	800115e <Move_Motor+0xe6>
 800108c:	a201      	add	r2, pc, #4	; (adr r2, 8001094 <Move_Motor+0x1c>)
 800108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001092:	bf00      	nop
 8001094:	0800111d 	.word	0x0800111d
 8001098:	0800115f 	.word	0x0800115f
 800109c:	08001101 	.word	0x08001101
 80010a0:	0800115f 	.word	0x0800115f
 80010a4:	0800112d 	.word	0x0800112d
 80010a8:	0800114d 	.word	0x0800114d
 80010ac:	0800113d 	.word	0x0800113d
 80010b0:	0800115f 	.word	0x0800115f
 80010b4:	0800115f 	.word	0x0800115f
 80010b8:	0800115f 	.word	0x0800115f
 80010bc:	080010f3 	.word	0x080010f3
 80010c0:	0800115f 	.word	0x0800115f
 80010c4:	0800115f 	.word	0x0800115f
 80010c8:	0800115f 	.word	0x0800115f
 80010cc:	0800115f 	.word	0x0800115f
 80010d0:	0800115f 	.word	0x0800115f
 80010d4:	080010e5 	.word	0x080010e5
 80010d8:	0800115f 	.word	0x0800115f
 80010dc:	0800115f 	.word	0x0800115f
 80010e0:	0800110f 	.word	0x0800110f
    case 'r': TIM1->CCR1=distance;  //for rotate-right
 80010e4:	4a20      	ldr	r2, [pc, #128]	; (8001168 <Move_Motor+0xf0>)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	6353      	str	r3, [r2, #52]	; 0x34
              HAL_Delay(500);
 80010ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ee:	f000 fbb9 	bl	8001864 <HAL_Delay>
    case 'l': TIM1->CCR1=distance;    //for rotate-left
 80010f2:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <Move_Motor+0xf0>)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	6353      	str	r3, [r2, #52]	; 0x34
              HAL_Delay(500);
 80010f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010fc:	f000 fbb2 	bl	8001864 <HAL_Delay>
    case 'd': TIM1->CCR2=distance;  //move down
 8001100:	4a19      	ldr	r2, [pc, #100]	; (8001168 <Move_Motor+0xf0>)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	6393      	str	r3, [r2, #56]	; 0x38
              HAL_Delay(500);
 8001106:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800110a:	f000 fbab 	bl	8001864 <HAL_Delay>
    case 'u': TIM1->CCR2=distance;  //move up
 800110e:	4a16      	ldr	r2, [pc, #88]	; (8001168 <Move_Motor+0xf0>)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	6393      	str	r3, [r2, #56]	; 0x38
              HAL_Delay(500);
 8001114:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001118:	f000 fba4 	bl	8001864 <HAL_Delay>
    case 'b': TIM2->CCR1=distance;  //move back
 800111c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	6353      	str	r3, [r2, #52]	; 0x34
              HAL_Delay(500);
 8001124:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001128:	f000 fb9c 	bl	8001864 <HAL_Delay>
    case 'f': TIM2->CCR1=distance;  //move forward
 800112c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	6353      	str	r3, [r2, #52]	; 0x34
              HAL_Delay(500);
 8001134:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001138:	f000 fb94 	bl	8001864 <HAL_Delay>
    case 'h': TIM2->CCR2=distance;  //HOLD OBJECT
 800113c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	6393      	str	r3, [r2, #56]	; 0x38
              HAL_Delay(500);
 8001144:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001148:	f000 fb8c 	bl	8001864 <HAL_Delay>
    case 'g': TIM2->CCR2=distance;  //DROP GROUND
 800114c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	6393      	str	r3, [r2, #56]	; 0x38
              HAL_Delay(500);
 8001154:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001158:	f000 fb84 	bl	8001864 <HAL_Delay>
    default: return;
 800115c:	bf00      	nop
 800115e:	bf00      	nop
    return;
  }

}
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40012c00 	.word	0x40012c00

0800116c <calc3DSpace>:
//co-ordinates in relative terms
void calc3DSpace(int R, int T, int P)  //co-odinates in R, Theta and Phi
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b08b      	sub	sp, #44	; 0x2c
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  //Pos[0-R, 1-T, 2-P]
  int t=(T/360)*50;  //set parameters for r
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	4a7c      	ldr	r2, [pc, #496]	; (800136c <calc3DSpace+0x200>)
 800117c:	fb82 1203 	smull	r1, r2, r2, r3
 8001180:	441a      	add	r2, r3
 8001182:	1212      	asrs	r2, r2, #8
 8001184:	17db      	asrs	r3, r3, #31
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2232      	movs	r2, #50	; 0x32
 800118a:	fb02 f303 	mul.w	r3, r2, r3
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  int p=(P/360)*50; //set parameters for base motor for phi
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a76      	ldr	r2, [pc, #472]	; (800136c <calc3DSpace+0x200>)
 8001194:	fb82 1203 	smull	r1, r2, r2, r3
 8001198:	441a      	add	r2, r3
 800119a:	1212      	asrs	r2, r2, #8
 800119c:	17db      	asrs	r3, r3, #31
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2232      	movs	r2, #50	; 0x32
 80011a2:	fb02 f303 	mul.w	r3, r2, r3
 80011a6:	623b      	str	r3, [r7, #32]
  if (T>0)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	dd0d      	ble.n	80011ca <calc3DSpace+0x5e>
  {
    Move_Motor('r', Pos[1]+t);
 80011ae:	4b70      	ldr	r3, [pc, #448]	; (8001370 <calc3DSpace+0x204>)
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b4:	4413      	add	r3, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	2072      	movs	r0, #114	; 0x72
 80011ba:	f7ff ff5d 	bl	8001078 <Move_Motor>
    Pos[1]+=t;
 80011be:	4b6c      	ldr	r3, [pc, #432]	; (8001370 <calc3DSpace+0x204>)
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c4:	4413      	add	r3, r2
 80011c6:	4a6a      	ldr	r2, [pc, #424]	; (8001370 <calc3DSpace+0x204>)
 80011c8:	6053      	str	r3, [r2, #4]
  }
  if (T<0)
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	da0d      	bge.n	80011ec <calc3DSpace+0x80>
  {
    Move_Motor('l', Pos[1]-t);
 80011d0:	4b67      	ldr	r3, [pc, #412]	; (8001370 <calc3DSpace+0x204>)
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	4619      	mov	r1, r3
 80011da:	206c      	movs	r0, #108	; 0x6c
 80011dc:	f7ff ff4c 	bl	8001078 <Move_Motor>
    Pos[1]-=t;
 80011e0:	4b63      	ldr	r3, [pc, #396]	; (8001370 <calc3DSpace+0x204>)
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	4a61      	ldr	r2, [pc, #388]	; (8001370 <calc3DSpace+0x204>)
 80011ea:	6053      	str	r3, [r2, #4]
  }
  int k;
  if (R<0)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	da4a      	bge.n	8001288 <calc3DSpace+0x11c>
  {
	float i=acos(R/Pos[0]);			//refer to calculations for computing distance vector
 80011f2:	4b5f      	ldr	r3, [pc, #380]	; (8001370 <calc3DSpace+0x204>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f945 	bl	800048c <__aeabi_i2d>
 8001202:	4603      	mov	r3, r0
 8001204:	460c      	mov	r4, r1
 8001206:	ec44 3b10 	vmov	d0, r3, r4
 800120a:	f004 f8ef 	bl	80053ec <acos>
 800120e:	ec54 3b10 	vmov	r3, r4, d0
 8001212:	4618      	mov	r0, r3
 8001214:	4621      	mov	r1, r4
 8001216:	f7ff fc7b 	bl	8000b10 <__aeabi_d2f>
 800121a:	4603      	mov	r3, r0
 800121c:	61fb      	str	r3, [r7, #28]
	k = i/(2*PI)*50;
 800121e:	eddf 7a55 	vldr	s15, [pc, #340]	; 8001374 <calc3DSpace+0x208>
 8001222:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001226:	edd7 6a07 	vldr	s13, [r7, #28]
 800122a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122e:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8001378 <calc3DSpace+0x20c>
 8001232:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800123a:	ee17 3a90 	vmov	r3, s15
 800123e:	61bb      	str	r3, [r7, #24]
    Move_Motor('b', Pos[2]-(k/2));
 8001240:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <calc3DSpace+0x204>)
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	0fd9      	lsrs	r1, r3, #31
 8001248:	440b      	add	r3, r1
 800124a:	105b      	asrs	r3, r3, #1
 800124c:	425b      	negs	r3, r3
 800124e:	4413      	add	r3, r2
 8001250:	4619      	mov	r1, r3
 8001252:	2062      	movs	r0, #98	; 0x62
 8001254:	f7ff ff10 	bl	8001078 <Move_Motor>
    Move_Motor('u', Pos[0]+k);		//assumption that both the arms of the robot are equal in length
 8001258:	4b45      	ldr	r3, [pc, #276]	; (8001370 <calc3DSpace+0x204>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	4413      	add	r3, r2
 8001260:	4619      	mov	r1, r3
 8001262:	2075      	movs	r0, #117	; 0x75
 8001264:	f7ff ff08 	bl	8001078 <Move_Motor>
    Pos[2]-=k/2;
 8001268:	4b41      	ldr	r3, [pc, #260]	; (8001370 <calc3DSpace+0x204>)
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	0fd9      	lsrs	r1, r3, #31
 8001270:	440b      	add	r3, r1
 8001272:	105b      	asrs	r3, r3, #1
 8001274:	425b      	negs	r3, r3
 8001276:	4413      	add	r3, r2
 8001278:	4a3d      	ldr	r2, [pc, #244]	; (8001370 <calc3DSpace+0x204>)
 800127a:	6093      	str	r3, [r2, #8]
    Pos[0]+=k;
 800127c:	4b3c      	ldr	r3, [pc, #240]	; (8001370 <calc3DSpace+0x204>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	4413      	add	r3, r2
 8001284:	4a3a      	ldr	r2, [pc, #232]	; (8001370 <calc3DSpace+0x204>)
 8001286:	6013      	str	r3, [r2, #0]
  }
  if (R>0)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	dd48      	ble.n	8001320 <calc3DSpace+0x1b4>
  {
	float i=acos(R/Pos[0]);
 800128e:	4b38      	ldr	r3, [pc, #224]	; (8001370 <calc3DSpace+0x204>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	fb92 f3f3 	sdiv	r3, r2, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f8f7 	bl	800048c <__aeabi_i2d>
 800129e:	4603      	mov	r3, r0
 80012a0:	460c      	mov	r4, r1
 80012a2:	ec44 3b10 	vmov	d0, r3, r4
 80012a6:	f004 f8a1 	bl	80053ec <acos>
 80012aa:	ec54 3b10 	vmov	r3, r4, d0
 80012ae:	4618      	mov	r0, r3
 80012b0:	4621      	mov	r1, r4
 80012b2:	f7ff fc2d 	bl	8000b10 <__aeabi_d2f>
 80012b6:	4603      	mov	r3, r0
 80012b8:	617b      	str	r3, [r7, #20]
	k = i/(2*PI)*50;
 80012ba:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8001374 <calc3DSpace+0x208>
 80012be:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012c2:	edd7 6a05 	vldr	s13, [r7, #20]
 80012c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ca:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001378 <calc3DSpace+0x20c>
 80012ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d6:	ee17 3a90 	vmov	r3, s15
 80012da:	61bb      	str	r3, [r7, #24]
	Move_Motor('f',Pos[2]+(k/2));
 80012dc:	4b24      	ldr	r3, [pc, #144]	; (8001370 <calc3DSpace+0x204>)
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	0fd9      	lsrs	r1, r3, #31
 80012e4:	440b      	add	r3, r1
 80012e6:	105b      	asrs	r3, r3, #1
 80012e8:	4413      	add	r3, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	2066      	movs	r0, #102	; 0x66
 80012ee:	f7ff fec3 	bl	8001078 <Move_Motor>
	Move_Motor('d',Pos[0]-k);
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <calc3DSpace+0x204>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	2064      	movs	r0, #100	; 0x64
 80012fe:	f7ff febb 	bl	8001078 <Move_Motor>
	Pos[2]+=k/2;
 8001302:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <calc3DSpace+0x204>)
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	0fd9      	lsrs	r1, r3, #31
 800130a:	440b      	add	r3, r1
 800130c:	105b      	asrs	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	4a17      	ldr	r2, [pc, #92]	; (8001370 <calc3DSpace+0x204>)
 8001312:	6093      	str	r3, [r2, #8]
	Pos[0]-=k;
 8001314:	4b16      	ldr	r3, [pc, #88]	; (8001370 <calc3DSpace+0x204>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	4a14      	ldr	r2, [pc, #80]	; (8001370 <calc3DSpace+0x204>)
 800131e:	6013      	str	r3, [r2, #0]
  }

  if (P>0)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	dd0d      	ble.n	8001342 <calc3DSpace+0x1d6>
  {
    Move_Motor('f', Pos[2]+p);
 8001326:	4b12      	ldr	r3, [pc, #72]	; (8001370 <calc3DSpace+0x204>)
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	4413      	add	r3, r2
 800132e:	4619      	mov	r1, r3
 8001330:	2066      	movs	r0, #102	; 0x66
 8001332:	f7ff fea1 	bl	8001078 <Move_Motor>
    Pos[2]+=t;
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <calc3DSpace+0x204>)
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	4413      	add	r3, r2
 800133e:	4a0c      	ldr	r2, [pc, #48]	; (8001370 <calc3DSpace+0x204>)
 8001340:	6093      	str	r3, [r2, #8]
  }
  if (P<0)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	da0d      	bge.n	8001364 <calc3DSpace+0x1f8>
  {
    Move_Motor('b', Pos[2]-p);
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <calc3DSpace+0x204>)
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	4619      	mov	r1, r3
 8001352:	2062      	movs	r0, #98	; 0x62
 8001354:	f7ff fe90 	bl	8001078 <Move_Motor>
    Pos[2]-=t;
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <calc3DSpace+0x204>)
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	4a03      	ldr	r2, [pc, #12]	; (8001370 <calc3DSpace+0x204>)
 8001362:	6093      	str	r3, [r2, #8]
  }
}
 8001364:	bf00      	nop
 8001366:	372c      	adds	r7, #44	; 0x2c
 8001368:	46bd      	mov	sp, r7
 800136a:	bd90      	pop	{r4, r7, pc}
 800136c:	b60b60b7 	.word	0xb60b60b7
 8001370:	20000198 	.word	0x20000198
 8001374:	40490fdc 	.word	0x40490fdc
 8001378:	42480000 	.word	0x42480000

0800137c <cartesianToRadial>:

void cartesianToRadial(int x, int y, int z){
 800137c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800137e:	b089      	sub	sp, #36	; 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
	int dist= (x^2)+(y^2)+(z^2);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f083 0202 	eor.w	r2, r3, #2
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	f083 0302 	eor.w	r3, r3, #2
 8001394:	441a      	add	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f083 0302 	eor.w	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	61fb      	str	r3, [r7, #28]
	int thet= (atan(x/y)/(2*PI))*360;
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f86f 	bl	800048c <__aeabi_i2d>
 80013ae:	4603      	mov	r3, r0
 80013b0:	460c      	mov	r4, r1
 80013b2:	ec44 3b10 	vmov	d0, r3, r4
 80013b6:	f003 fe6f 	bl	8005098 <atan>
 80013ba:	ec56 5b10 	vmov	r5, r6, d0
 80013be:	eddf 7a30 	vldr	s15, [pc, #192]	; 8001480 <cartesianToRadial+0x104>
 80013c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013c6:	ee17 0a90 	vmov	r0, s15
 80013ca:	f7ff f871 	bl	80004b0 <__aeabi_f2d>
 80013ce:	4603      	mov	r3, r0
 80013d0:	460c      	mov	r4, r1
 80013d2:	461a      	mov	r2, r3
 80013d4:	4623      	mov	r3, r4
 80013d6:	4628      	mov	r0, r5
 80013d8:	4631      	mov	r1, r6
 80013da:	f7ff f9eb 	bl	80007b4 <__aeabi_ddiv>
 80013de:	4603      	mov	r3, r0
 80013e0:	460c      	mov	r4, r1
 80013e2:	4618      	mov	r0, r3
 80013e4:	4621      	mov	r1, r4
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <cartesianToRadial+0x108>)
 80013ec:	f7ff f8b8 	bl	8000560 <__aeabi_dmul>
 80013f0:	4603      	mov	r3, r0
 80013f2:	460c      	mov	r4, r1
 80013f4:	4618      	mov	r0, r3
 80013f6:	4621      	mov	r1, r4
 80013f8:	f7ff fb62 	bl	8000ac0 <__aeabi_d2iz>
 80013fc:	4603      	mov	r3, r0
 80013fe:	61bb      	str	r3, [r7, #24]
	int phi=  (atan(((x^2) + (y^2))/z)/(2*PI))*360;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f083 0202 	eor.w	r2, r3, #2
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	f083 0302 	eor.w	r3, r3, #2
 800140c:	441a      	add	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	fb92 f3f3 	sdiv	r3, r2, r3
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff f839 	bl	800048c <__aeabi_i2d>
 800141a:	4603      	mov	r3, r0
 800141c:	460c      	mov	r4, r1
 800141e:	ec44 3b10 	vmov	d0, r3, r4
 8001422:	f003 fe39 	bl	8005098 <atan>
 8001426:	ec56 5b10 	vmov	r5, r6, d0
 800142a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8001480 <cartesianToRadial+0x104>
 800142e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001432:	ee17 0a90 	vmov	r0, s15
 8001436:	f7ff f83b 	bl	80004b0 <__aeabi_f2d>
 800143a:	4603      	mov	r3, r0
 800143c:	460c      	mov	r4, r1
 800143e:	461a      	mov	r2, r3
 8001440:	4623      	mov	r3, r4
 8001442:	4628      	mov	r0, r5
 8001444:	4631      	mov	r1, r6
 8001446:	f7ff f9b5 	bl	80007b4 <__aeabi_ddiv>
 800144a:	4603      	mov	r3, r0
 800144c:	460c      	mov	r4, r1
 800144e:	4618      	mov	r0, r3
 8001450:	4621      	mov	r1, r4
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <cartesianToRadial+0x108>)
 8001458:	f7ff f882 	bl	8000560 <__aeabi_dmul>
 800145c:	4603      	mov	r3, r0
 800145e:	460c      	mov	r4, r1
 8001460:	4618      	mov	r0, r3
 8001462:	4621      	mov	r1, r4
 8001464:	f7ff fb2c 	bl	8000ac0 <__aeabi_d2iz>
 8001468:	4603      	mov	r3, r0
 800146a:	617b      	str	r3, [r7, #20]
	calc3DSpace(dist, thet, phi);
 800146c:	697a      	ldr	r2, [r7, #20]
 800146e:	69b9      	ldr	r1, [r7, #24]
 8001470:	69f8      	ldr	r0, [r7, #28]
 8001472:	f7ff fe7b 	bl	800116c <calc3DSpace>
}
 8001476:	bf00      	nop
 8001478:	3724      	adds	r7, #36	; 0x24
 800147a:	46bd      	mov	sp, r7
 800147c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800147e:	bf00      	nop
 8001480:	40490fdc 	.word	0x40490fdc
 8001484:	40768000 	.word	0x40768000

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <HAL_MspInit+0x44>)
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_MspInit+0x44>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6193      	str	r3, [r2, #24]
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_MspInit+0x44>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <HAL_MspInit+0x44>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	4a08      	ldr	r2, [pc, #32]	; (80014dc <HAL_MspInit+0x44>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c0:	61d3      	str	r3, [r2, #28]
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_MspInit+0x44>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000

080014e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a13      	ldr	r2, [pc, #76]	; (800153c <HAL_TIM_Base_MspInit+0x5c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d10c      	bne.n	800150c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_TIM_Base_MspInit+0x60>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <HAL_TIM_Base_MspInit+0x60>)
 80014f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014fc:	6193      	str	r3, [r2, #24]
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_TIM_Base_MspInit+0x60>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800150a:	e010      	b.n	800152e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001514:	d10b      	bne.n	800152e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001516:	4b0a      	ldr	r3, [pc, #40]	; (8001540 <HAL_TIM_Base_MspInit+0x60>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a09      	ldr	r2, [pc, #36]	; (8001540 <HAL_TIM_Base_MspInit+0x60>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <HAL_TIM_Base_MspInit+0x60>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40012c00 	.word	0x40012c00
 8001540:	40021000 	.word	0x40021000

08001544 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08a      	sub	sp, #40	; 0x28
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a22      	ldr	r2, [pc, #136]	; (80015ec <HAL_TIM_MspPostInit+0xa8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d11c      	bne.n	80015a0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001566:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <HAL_TIM_MspPostInit+0xac>)
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	4a21      	ldr	r2, [pc, #132]	; (80015f0 <HAL_TIM_MspPostInit+0xac>)
 800156c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001570:	6153      	str	r3, [r2, #20]
 8001572:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <HAL_TIM_MspPostInit+0xac>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800157a:	613b      	str	r3, [r7, #16]
 800157c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800157e:	2303      	movs	r3, #3
 8001580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800158e:	2302      	movs	r3, #2
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	4816      	ldr	r0, [pc, #88]	; (80015f4 <HAL_TIM_MspPostInit+0xb0>)
 800159a:	f000 fa6b 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800159e:	e021      	b.n	80015e4 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a8:	d11c      	bne.n	80015e4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_TIM_MspPostInit+0xac>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <HAL_TIM_MspPostInit+0xac>)
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	6153      	str	r3, [r2, #20]
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_TIM_MspPostInit+0xac>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015c2:	2303      	movs	r3, #3
 80015c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015d2:	2301      	movs	r3, #1
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e0:	f000 fa48 	bl	8001a74 <HAL_GPIO_Init>
}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40012c00 	.word	0x40012c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	48000800 	.word	0x48000800

080015f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a25      	ldr	r2, [pc, #148]	; (80016ac <HAL_UART_MspInit+0xb4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d144      	bne.n	80016a4 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800161a:	4b25      	ldr	r3, [pc, #148]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a24      	ldr	r2, [pc, #144]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 8001620:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 8001638:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800163c:	6153      	str	r3, [r2, #20]
 800163e:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 8001650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001654:	6153      	str	r3, [r2, #20]
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <HAL_UART_MspInit+0xb8>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001670:	2303      	movs	r3, #3
 8001672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001674:	2305      	movs	r3, #5
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	480d      	ldr	r0, [pc, #52]	; (80016b4 <HAL_UART_MspInit+0xbc>)
 8001680:	f000 f9f8 	bl	8001a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001684:	2304      	movs	r3, #4
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8001694:	2305      	movs	r3, #5
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4806      	ldr	r0, [pc, #24]	; (80016b8 <HAL_UART_MspInit+0xc0>)
 80016a0:	f000 f9e8 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	; 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40005000 	.word	0x40005000
 80016b0:	40021000 	.word	0x40021000
 80016b4:	48000800 	.word	0x48000800
 80016b8:	48000c00 	.word	0x48000c00

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <HardFault_Handler+0x4>

080016d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <MemManage_Handler+0x4>

080016d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <BusFault_Handler+0x4>

080016dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <UsageFault_Handler+0x4>

080016e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001710:	f000 f888 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}

08001718 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <SystemInit+0x28>)
 800171e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001722:	4a07      	ldr	r2, [pc, #28]	; (8001740 <SystemInit+0x28>)
 8001724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <SystemInit+0x28>)
 800172e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001732:	609a      	str	r2, [r3, #8]
#endif
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800177c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001748:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800174a:	e003      	b.n	8001754 <LoopCopyDataInit>

0800174c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800174e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001750:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001752:	3104      	adds	r1, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001754:	480b      	ldr	r0, [pc, #44]	; (8001784 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001758:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800175a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800175c:	d3f6      	bcc.n	800174c <CopyDataInit>
	ldr	r2, =_sbss
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001760:	e002      	b.n	8001768 <LoopFillZerobss>

08001762 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001762:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001764:	f842 3b04 	str.w	r3, [r2], #4

08001768 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001768:	4b09      	ldr	r3, [pc, #36]	; (8001790 <LoopForever+0x16>)
	cmp	r2, r3
 800176a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800176c:	d3f9      	bcc.n	8001762 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800176e:	f7ff ffd3 	bl	8001718 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001772:	f003 fc65 	bl	8005040 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001776:	f7ff fa1b 	bl	8000bb0 <main>

0800177a <LoopForever>:

LoopForever:
    b LoopForever
 800177a:	e7fe      	b.n	800177a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800177c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001780:	08005b70 	.word	0x08005b70
	ldr	r0, =_sdata
 8001784:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001788:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 800178c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001790:	200001a8 	.word	0x200001a8

08001794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC1_2_IRQHandler>
	...

08001798 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_Init+0x28>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <HAL_Init+0x28>)
 80017a2:	f043 0310 	orr.w	r3, r3, #16
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 f92f 	bl	8001a0c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ae:	2000      	movs	r0, #0
 80017b0:	f000 f808 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b4:	f7ff fe70 	bl	8001498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40022000 	.word	0x40022000

080017c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x54>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x58>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f939 	bl	8001a5a <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f000 f90f 	bl	8001a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	; (8001820 <HAL_InitTick+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000000 	.word	0x20000000
 800181c:	20000008 	.word	0x20000008
 8001820:	20000004 	.word	0x20000004

08001824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000008 	.word	0x20000008
 8001848:	200001a4 	.word	0x200001a4

0800184c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	200001a4 	.word	0x200001a4

08001864 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff ffee 	bl	800184c <HAL_GetTick>
 8001870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800187c:	d005      	beq.n	800188a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_Delay+0x40>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800188a:	bf00      	nop
 800188c:	f7ff ffde 	bl	800184c <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d8f7      	bhi.n	800188c <HAL_Delay+0x28>
  {
  }
}
 800189c:	bf00      	nop
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000008 	.word	0x20000008

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018da:	4a04      	ldr	r2, [pc, #16]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	60d3      	str	r3, [r2, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	db0a      	blt.n	8001936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	490c      	ldr	r1, [pc, #48]	; (8001958 <__NVIC_SetPriority+0x4c>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	440b      	add	r3, r1
 8001930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001934:	e00a      	b.n	800194c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4908      	ldr	r1, [pc, #32]	; (800195c <__NVIC_SetPriority+0x50>)
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	3b04      	subs	r3, #4
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	440b      	add	r3, r1
 800194a:	761a      	strb	r2, [r3, #24]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000e100 	.word	0xe000e100
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	; 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f1c3 0307 	rsb	r3, r3, #7
 800197a:	2b04      	cmp	r3, #4
 800197c:	bf28      	it	cs
 800197e:	2304      	movcs	r3, #4
 8001980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3304      	adds	r3, #4
 8001986:	2b06      	cmp	r3, #6
 8001988:	d902      	bls.n	8001990 <NVIC_EncodePriority+0x30>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3b03      	subs	r3, #3
 800198e:	e000      	b.n	8001992 <NVIC_EncodePriority+0x32>
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	f04f 32ff 	mov.w	r2, #4294967295
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	4313      	orrs	r3, r2
         );
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	; 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d8:	d301      	bcc.n	80019de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019da:	2301      	movs	r3, #1
 80019dc:	e00f      	b.n	80019fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019de:	4a0a      	ldr	r2, [pc, #40]	; (8001a08 <SysTick_Config+0x40>)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e6:	210f      	movs	r1, #15
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f7ff ff8e 	bl	800190c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <SysTick_Config+0x40>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f6:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <SysTick_Config+0x40>)
 80019f8:	2207      	movs	r2, #7
 80019fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	e000e010 	.word	0xe000e010

08001a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff ff47 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b086      	sub	sp, #24
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a34:	f7ff ff5c 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	6978      	ldr	r0, [r7, #20]
 8001a40:	f7ff ff8e 	bl	8001960 <NVIC_EncodePriority>
 8001a44:	4602      	mov	r2, r0
 8001a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff5d 	bl	800190c <__NVIC_SetPriority>
}
 8001a52:	bf00      	nop
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffb0 	bl	80019c8 <SysTick_Config>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a82:	e160      	b.n	8001d46 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2101      	movs	r1, #1
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	4013      	ands	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8152 	beq.w	8001d40 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x38>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b12      	cmp	r3, #18
 8001aaa:	d123      	bne.n	8001af4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	08da      	lsrs	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3208      	adds	r2, #8
 8001ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	08da      	lsrs	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	6939      	ldr	r1, [r7, #16]
 8001af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d00b      	beq.n	8001b48 <HAL_GPIO_Init+0xd4>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d007      	beq.n	8001b48 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b3c:	2b11      	cmp	r3, #17
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b12      	cmp	r3, #18
 8001b46:	d130      	bne.n	8001baa <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	2203      	movs	r2, #3
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	68da      	ldr	r2, [r3, #12]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b7e:	2201      	movs	r2, #1
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	091b      	lsrs	r3, r3, #4
 8001b94:	f003 0201 	and.w	r2, r3, #1
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 80ac 	beq.w	8001d40 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be8:	4b5e      	ldr	r3, [pc, #376]	; (8001d64 <HAL_GPIO_Init+0x2f0>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a5d      	ldr	r2, [pc, #372]	; (8001d64 <HAL_GPIO_Init+0x2f0>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b5b      	ldr	r3, [pc, #364]	; (8001d64 <HAL_GPIO_Init+0x2f0>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c00:	4a59      	ldr	r2, [pc, #356]	; (8001d68 <HAL_GPIO_Init+0x2f4>)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	089b      	lsrs	r3, r3, #2
 8001c06:	3302      	adds	r3, #2
 8001c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	220f      	movs	r2, #15
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c2a:	d025      	beq.n	8001c78 <HAL_GPIO_Init+0x204>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a4f      	ldr	r2, [pc, #316]	; (8001d6c <HAL_GPIO_Init+0x2f8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d01f      	beq.n	8001c74 <HAL_GPIO_Init+0x200>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a4e      	ldr	r2, [pc, #312]	; (8001d70 <HAL_GPIO_Init+0x2fc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d019      	beq.n	8001c70 <HAL_GPIO_Init+0x1fc>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a4d      	ldr	r2, [pc, #308]	; (8001d74 <HAL_GPIO_Init+0x300>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d013      	beq.n	8001c6c <HAL_GPIO_Init+0x1f8>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a4c      	ldr	r2, [pc, #304]	; (8001d78 <HAL_GPIO_Init+0x304>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d00d      	beq.n	8001c68 <HAL_GPIO_Init+0x1f4>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a4b      	ldr	r2, [pc, #300]	; (8001d7c <HAL_GPIO_Init+0x308>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d007      	beq.n	8001c64 <HAL_GPIO_Init+0x1f0>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a4a      	ldr	r2, [pc, #296]	; (8001d80 <HAL_GPIO_Init+0x30c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d101      	bne.n	8001c60 <HAL_GPIO_Init+0x1ec>
 8001c5c:	2306      	movs	r3, #6
 8001c5e:	e00c      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c60:	2307      	movs	r3, #7
 8001c62:	e00a      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c64:	2305      	movs	r3, #5
 8001c66:	e008      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c68:	2304      	movs	r3, #4
 8001c6a:	e006      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e004      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c70:	2302      	movs	r3, #2
 8001c72:	e002      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c74:	2301      	movs	r3, #1
 8001c76:	e000      	b.n	8001c7a <HAL_GPIO_Init+0x206>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	f002 0203 	and.w	r2, r2, #3
 8001c80:	0092      	lsls	r2, r2, #2
 8001c82:	4093      	lsls	r3, r2
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c8a:	4937      	ldr	r1, [pc, #220]	; (8001d68 <HAL_GPIO_Init+0x2f4>)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	3302      	adds	r3, #2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c98:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <HAL_GPIO_Init+0x310>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cbc:	4a31      	ldr	r2, [pc, #196]	; (8001d84 <HAL_GPIO_Init+0x310>)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cc2:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <HAL_GPIO_Init+0x310>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ce6:	4a27      	ldr	r2, [pc, #156]	; (8001d84 <HAL_GPIO_Init+0x310>)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <HAL_GPIO_Init+0x310>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d10:	4a1c      	ldr	r2, [pc, #112]	; (8001d84 <HAL_GPIO_Init+0x310>)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d16:	4b1b      	ldr	r3, [pc, #108]	; (8001d84 <HAL_GPIO_Init+0x310>)
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <HAL_GPIO_Init+0x310>)
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3301      	adds	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f47f ae97 	bne.w	8001a84 <HAL_GPIO_Init+0x10>
  }
}
 8001d56:	bf00      	nop
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	48000400 	.word	0x48000400
 8001d70:	48000800 	.word	0x48000800
 8001d74:	48000c00 	.word	0x48000c00
 8001d78:	48001000 	.word	0x48001000
 8001d7c:	48001400 	.word	0x48001400
 8001d80:	48001800 	.word	0x48001800
 8001d84:	40010400 	.word	0x40010400

08001d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	1d3b      	adds	r3, r7, #4
 8001d92:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d102      	bne.n	8001da2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f000 bf01 	b.w	8002ba4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 8160 	beq.w	8002072 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001db2:	4bae      	ldr	r3, [pc, #696]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d00c      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dbe:	4bab      	ldr	r3, [pc, #684]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d159      	bne.n	8001e7e <HAL_RCC_OscConfig+0xf6>
 8001dca:	4ba8      	ldr	r3, [pc, #672]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001dd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd6:	d152      	bne.n	8001e7e <HAL_RCC_OscConfig+0xf6>
 8001dd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ddc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001dec:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	095b      	lsrs	r3, r3, #5
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d102      	bne.n	8001e0a <HAL_RCC_OscConfig+0x82>
 8001e04:	4b99      	ldr	r3, [pc, #612]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	e015      	b.n	8001e36 <HAL_RCC_OscConfig+0xae>
 8001e0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e0e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e22:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001e26:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001e32:	4b8e      	ldr	r3, [pc, #568]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e3a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001e3e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001e42:	fa92 f2a2 	rbit	r2, r2
 8001e46:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001e4a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001e4e:	fab2 f282 	clz	r2, r2
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	f042 0220 	orr.w	r2, r2, #32
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	f002 021f 	and.w	r2, r2, #31
 8001e5e:	2101      	movs	r1, #1
 8001e60:	fa01 f202 	lsl.w	r2, r1, r2
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8102 	beq.w	8002070 <HAL_RCC_OscConfig+0x2e8>
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f040 80fc 	bne.w	8002070 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	f000 be93 	b.w	8002ba4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e88:	d106      	bne.n	8001e98 <HAL_RCC_OscConfig+0x110>
 8001e8a:	4b78      	ldr	r3, [pc, #480]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a77      	ldr	r2, [pc, #476]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e030      	b.n	8001efa <HAL_RCC_OscConfig+0x172>
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x134>
 8001ea2:	4b72      	ldr	r3, [pc, #456]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a71      	ldr	r2, [pc, #452]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b6f      	ldr	r3, [pc, #444]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a6e      	ldr	r2, [pc, #440]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001eb4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e01e      	b.n	8001efa <HAL_RCC_OscConfig+0x172>
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ec6:	d10c      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x15a>
 8001ec8:	4b68      	ldr	r3, [pc, #416]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a67      	ldr	r2, [pc, #412]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001ece:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b65      	ldr	r3, [pc, #404]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a64      	ldr	r2, [pc, #400]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	e00b      	b.n	8001efa <HAL_RCC_OscConfig+0x172>
 8001ee2:	4b62      	ldr	r3, [pc, #392]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a61      	ldr	r2, [pc, #388]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b5f      	ldr	r3, [pc, #380]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a5e      	ldr	r2, [pc, #376]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001ef4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d059      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff fca2 	bl	800184c <HAL_GetTick>
 8001f08:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f0e:	f7ff fc9d 	bl	800184c <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b64      	cmp	r3, #100	; 0x64
 8001f1c:	d902      	bls.n	8001f24 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	f000 be40 	b.w	8002ba4 <HAL_RCC_OscConfig+0xe1c>
 8001f24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f28:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001f30:	fa93 f3a3 	rbit	r3, r3
 8001f34:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001f38:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d102      	bne.n	8001f56 <HAL_RCC_OscConfig+0x1ce>
 8001f50:	4b46      	ldr	r3, [pc, #280]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	e015      	b.n	8001f82 <HAL_RCC_OscConfig+0x1fa>
 8001f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f5a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001f62:	fa93 f3a3 	rbit	r3, r3
 8001f66:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001f6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f6e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f72:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8001f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f86:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001f8a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001f8e:	fa92 f2a2 	rbit	r2, r2
 8001f92:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001f96:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f9a:	fab2 f282 	clz	r2, r2
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	f042 0220 	orr.w	r2, r2, #32
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	f002 021f 	and.w	r2, r2, #31
 8001faa:	2101      	movs	r1, #1
 8001fac:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0ab      	beq.n	8001f0e <HAL_RCC_OscConfig+0x186>
 8001fb6:	e05c      	b.n	8002072 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fc48 	bl	800184c <HAL_GetTick>
 8001fbc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc2:	f7ff fc43 	bl	800184c <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	; 0x64
 8001fd0:	d902      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	f000 bde6 	b.w	8002ba4 <HAL_RCC_OscConfig+0xe1c>
 8001fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fdc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001fec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b01      	cmp	r3, #1
 8002002:	d102      	bne.n	800200a <HAL_RCC_OscConfig+0x282>
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	e015      	b.n	8002036 <HAL_RCC_OscConfig+0x2ae>
 800200a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800200e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800201e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002022:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002026:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <HAL_RCC_OscConfig+0x2e4>)
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800203a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800203e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8002042:	fa92 f2a2 	rbit	r2, r2
 8002046:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800204a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800204e:	fab2 f282 	clz	r2, r2
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	f042 0220 	orr.w	r2, r2, #32
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	f002 021f 	and.w	r2, r2, #31
 800205e:	2101      	movs	r1, #1
 8002060:	fa01 f202 	lsl.w	r2, r1, r2
 8002064:	4013      	ands	r3, r2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1ab      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x23a>
 800206a:	e002      	b.n	8002072 <HAL_RCC_OscConfig+0x2ea>
 800206c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 8170 	beq.w	8002362 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002082:	4bd0      	ldr	r3, [pc, #832]	; (80023c4 <HAL_RCC_OscConfig+0x63c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800208e:	4bcd      	ldr	r3, [pc, #820]	; (80023c4 <HAL_RCC_OscConfig+0x63c>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b08      	cmp	r3, #8
 8002098:	d16d      	bne.n	8002176 <HAL_RCC_OscConfig+0x3ee>
 800209a:	4bca      	ldr	r3, [pc, #808]	; (80023c4 <HAL_RCC_OscConfig+0x63c>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80020a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020a6:	d166      	bne.n	8002176 <HAL_RCC_OscConfig+0x3ee>
 80020a8:	2302      	movs	r3, #2
 80020aa:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80020ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d102      	bne.n	80020d8 <HAL_RCC_OscConfig+0x350>
 80020d2:	4bbc      	ldr	r3, [pc, #752]	; (80023c4 <HAL_RCC_OscConfig+0x63c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	e013      	b.n	8002100 <HAL_RCC_OscConfig+0x378>
 80020d8:	2302      	movs	r3, #2
 80020da:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80020ea:	2302      	movs	r3, #2
 80020ec:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80020f0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80020f4:	fa93 f3a3 	rbit	r3, r3
 80020f8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020fc:	4bb1      	ldr	r3, [pc, #708]	; (80023c4 <HAL_RCC_OscConfig+0x63c>)
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	2202      	movs	r2, #2
 8002102:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002106:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800210a:	fa92 f2a2 	rbit	r2, r2
 800210e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8002112:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002116:	fab2 f282 	clz	r2, r2
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	f042 0220 	orr.w	r2, r2, #32
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	f002 021f 	and.w	r2, r2, #31
 8002126:	2101      	movs	r1, #1
 8002128:	fa01 f202 	lsl.w	r2, r1, r2
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <HAL_RCC_OscConfig+0x3ba>
 8002132:	1d3b      	adds	r3, r7, #4
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d002      	beq.n	8002142 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	f000 bd31 	b.w	8002ba4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002142:	4ba0      	ldr	r3, [pc, #640]	; (80023c4 <HAL_RCC_OscConfig+0x63c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	21f8      	movs	r1, #248	; 0xf8
 8002152:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800215a:	fa91 f1a1 	rbit	r1, r1
 800215e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8002162:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002166:	fab1 f181 	clz	r1, r1
 800216a:	b2c9      	uxtb	r1, r1
 800216c:	408b      	lsls	r3, r1
 800216e:	4995      	ldr	r1, [pc, #596]	; (80023c4 <HAL_RCC_OscConfig+0x63c>)
 8002170:	4313      	orrs	r3, r2
 8002172:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002174:	e0f5      	b.n	8002362 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002176:	1d3b      	adds	r3, r7, #4
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 8085 	beq.w	800228c <HAL_RCC_OscConfig+0x504>
 8002182:	2301      	movs	r3, #1
 8002184:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800218c:	fa93 f3a3 	rbit	r3, r3
 8002190:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002194:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002198:	fab3 f383 	clz	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	461a      	mov	r2, r3
 80021aa:	2301      	movs	r3, #1
 80021ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ae:	f7ff fb4d 	bl	800184c <HAL_GetTick>
 80021b2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b6:	e00a      	b.n	80021ce <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021b8:	f7ff fb48 	bl	800184c <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d902      	bls.n	80021ce <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	f000 bceb 	b.w	8002ba4 <HAL_RCC_OscConfig+0xe1c>
 80021ce:	2302      	movs	r3, #2
 80021d0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80021d8:	fa93 f3a3 	rbit	r3, r3
 80021dc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80021e0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d102      	bne.n	80021fe <HAL_RCC_OscConfig+0x476>
 80021f8:	4b72      	ldr	r3, [pc, #456]	; (80023c4 <HAL_RCC_OscConfig+0x63c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	e013      	b.n	8002226 <HAL_RCC_OscConfig+0x49e>
 80021fe:	2302      	movs	r3, #2
 8002200:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002204:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002208:	fa93 f3a3 	rbit	r3, r3
 800220c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002210:	2302      	movs	r3, #2
 8002212:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002216:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002222:	4b68      	ldr	r3, [pc, #416]	; (80023c4 <HAL_RCC_OscConfig+0x63c>)
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	2202      	movs	r2, #2
 8002228:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800222c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002230:	fa92 f2a2 	rbit	r2, r2
 8002234:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8002238:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800223c:	fab2 f282 	clz	r2, r2
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	f042 0220 	orr.w	r2, r2, #32
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	f002 021f 	and.w	r2, r2, #31
 800224c:	2101      	movs	r1, #1
 800224e:	fa01 f202 	lsl.w	r2, r1, r2
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0af      	beq.n	80021b8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002258:	4b5a      	ldr	r3, [pc, #360]	; (80023c4 <HAL_RCC_OscConfig+0x63c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002260:	1d3b      	adds	r3, r7, #4
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	21f8      	movs	r1, #248	; 0xf8
 8002268:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8002270:	fa91 f1a1 	rbit	r1, r1
 8002274:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002278:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800227c:	fab1 f181 	clz	r1, r1
 8002280:	b2c9      	uxtb	r1, r1
 8002282:	408b      	lsls	r3, r1
 8002284:	494f      	ldr	r1, [pc, #316]	; (80023c4 <HAL_RCC_OscConfig+0x63c>)
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
 800228a:	e06a      	b.n	8002362 <HAL_RCC_OscConfig+0x5da>
 800228c:	2301      	movs	r3, #1
 800228e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002292:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002296:	fa93 f3a3 	rbit	r3, r3
 800229a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800229e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a2:	fab3 f383 	clz	r3, r3
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	461a      	mov	r2, r3
 80022b4:	2300      	movs	r3, #0
 80022b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff fac8 	bl	800184c <HAL_GetTick>
 80022bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c0:	e00a      	b.n	80022d8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c2:	f7ff fac3 	bl	800184c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d902      	bls.n	80022d8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	f000 bc66 	b.w	8002ba4 <HAL_RCC_OscConfig+0xe1c>
 80022d8:	2302      	movs	r3, #2
 80022da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80022ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ee:	fab3 f383 	clz	r3, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d102      	bne.n	8002308 <HAL_RCC_OscConfig+0x580>
 8002302:	4b30      	ldr	r3, [pc, #192]	; (80023c4 <HAL_RCC_OscConfig+0x63c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	e013      	b.n	8002330 <HAL_RCC_OscConfig+0x5a8>
 8002308:	2302      	movs	r3, #2
 800230a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800231a:	2302      	movs	r3, #2
 800231c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002320:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800232c:	4b25      	ldr	r3, [pc, #148]	; (80023c4 <HAL_RCC_OscConfig+0x63c>)
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	2202      	movs	r2, #2
 8002332:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002336:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800233a:	fa92 f2a2 	rbit	r2, r2
 800233e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002342:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002346:	fab2 f282 	clz	r2, r2
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	f042 0220 	orr.w	r2, r2, #32
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f002 021f 	and.w	r2, r2, #31
 8002356:	2101      	movs	r1, #1
 8002358:	fa01 f202 	lsl.w	r2, r1, r2
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1af      	bne.n	80022c2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80da 	beq.w	8002526 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d069      	beq.n	8002450 <HAL_RCC_OscConfig+0x6c8>
 800237c:	2301      	movs	r3, #1
 800237e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800238e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_OscConfig+0x640>)
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	461a      	mov	r2, r3
 80023a2:	2301      	movs	r3, #1
 80023a4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a6:	f7ff fa51 	bl	800184c <HAL_GetTick>
 80023aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ae:	e00d      	b.n	80023cc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b0:	f7ff fa4c 	bl	800184c <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d905      	bls.n	80023cc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e3ef      	b.n	8002ba4 <HAL_RCC_OscConfig+0xe1c>
 80023c4:	40021000 	.word	0x40021000
 80023c8:	10908120 	.word	0x10908120
 80023cc:	2302      	movs	r3, #2
 80023ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023d6:	fa93 f2a3 	rbit	r2, r3
 80023da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80023e4:	2202      	movs	r2, #2
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	fa93 f2a3 	rbit	r2, r3
 80023f2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80023fc:	2202      	movs	r2, #2
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	fa93 f2a3 	rbit	r2, r3
 800240a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800240e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002410:	4ba4      	ldr	r3, [pc, #656]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 8002412:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002414:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002418:	2102      	movs	r1, #2
 800241a:	6019      	str	r1, [r3, #0]
 800241c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fa93 f1a3 	rbit	r1, r3
 8002426:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800242a:	6019      	str	r1, [r3, #0]
  return result;
 800242c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800243c:	b2db      	uxtb	r3, r3
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	2101      	movs	r1, #1
 8002444:	fa01 f303 	lsl.w	r3, r1, r3
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0b0      	beq.n	80023b0 <HAL_RCC_OscConfig+0x628>
 800244e:	e06a      	b.n	8002526 <HAL_RCC_OscConfig+0x79e>
 8002450:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002454:	2201      	movs	r2, #1
 8002456:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002458:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	fa93 f2a3 	rbit	r2, r3
 8002462:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002466:	601a      	str	r2, [r3, #0]
  return result;
 8002468:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800246c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	4b8c      	ldr	r3, [pc, #560]	; (80026a8 <HAL_RCC_OscConfig+0x920>)
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	461a      	mov	r2, r3
 800247e:	2300      	movs	r3, #0
 8002480:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002482:	f7ff f9e3 	bl	800184c <HAL_GetTick>
 8002486:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248a:	e009      	b.n	80024a0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800248c:	f7ff f9de 	bl	800184c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e381      	b.n	8002ba4 <HAL_RCC_OscConfig+0xe1c>
 80024a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024a4:	2202      	movs	r2, #2
 80024a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	fa93 f2a3 	rbit	r2, r3
 80024b2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024bc:	2202      	movs	r2, #2
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	fa93 f2a3 	rbit	r2, r3
 80024ca:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024d4:	2202      	movs	r2, #2
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	fa93 f2a3 	rbit	r2, r3
 80024e2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80024e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e8:	4b6e      	ldr	r3, [pc, #440]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 80024ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024f0:	2102      	movs	r1, #2
 80024f2:	6019      	str	r1, [r3, #0]
 80024f4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	fa93 f1a3 	rbit	r1, r3
 80024fe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002502:	6019      	str	r1, [r3, #0]
  return result;
 8002504:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002514:	b2db      	uxtb	r3, r3
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	2101      	movs	r1, #1
 800251c:	fa01 f303 	lsl.w	r3, r1, r3
 8002520:	4013      	ands	r3, r2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1b2      	bne.n	800248c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002526:	1d3b      	adds	r3, r7, #4
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 8157 	beq.w	80027e4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253c:	4b59      	ldr	r3, [pc, #356]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d112      	bne.n	800256e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002548:	4b56      	ldr	r3, [pc, #344]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	4a55      	ldr	r2, [pc, #340]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 800254e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002552:	61d3      	str	r3, [r2, #28]
 8002554:	4b53      	ldr	r3, [pc, #332]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	f107 030c 	add.w	r3, r7, #12
 8002566:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002568:	2301      	movs	r3, #1
 800256a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256e:	4b4f      	ldr	r3, [pc, #316]	; (80026ac <HAL_RCC_OscConfig+0x924>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002576:	2b00      	cmp	r3, #0
 8002578:	d11a      	bne.n	80025b0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257a:	4b4c      	ldr	r3, [pc, #304]	; (80026ac <HAL_RCC_OscConfig+0x924>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a4b      	ldr	r2, [pc, #300]	; (80026ac <HAL_RCC_OscConfig+0x924>)
 8002580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002584:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002586:	f7ff f961 	bl	800184c <HAL_GetTick>
 800258a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258e:	e009      	b.n	80025a4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002590:	f7ff f95c 	bl	800184c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b64      	cmp	r3, #100	; 0x64
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e2ff      	b.n	8002ba4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a4:	4b41      	ldr	r3, [pc, #260]	; (80026ac <HAL_RCC_OscConfig+0x924>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ef      	beq.n	8002590 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d106      	bne.n	80025c8 <HAL_RCC_OscConfig+0x840>
 80025ba:	4b3a      	ldr	r3, [pc, #232]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4a39      	ldr	r2, [pc, #228]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6213      	str	r3, [r2, #32]
 80025c6:	e02f      	b.n	8002628 <HAL_RCC_OscConfig+0x8a0>
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x864>
 80025d2:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4a33      	ldr	r2, [pc, #204]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	6213      	str	r3, [r2, #32]
 80025de:	4b31      	ldr	r3, [pc, #196]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	4a30      	ldr	r2, [pc, #192]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 80025e4:	f023 0304 	bic.w	r3, r3, #4
 80025e8:	6213      	str	r3, [r2, #32]
 80025ea:	e01d      	b.n	8002628 <HAL_RCC_OscConfig+0x8a0>
 80025ec:	1d3b      	adds	r3, r7, #4
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b05      	cmp	r3, #5
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0x888>
 80025f6:	4b2b      	ldr	r3, [pc, #172]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	4a2a      	ldr	r2, [pc, #168]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 80025fc:	f043 0304 	orr.w	r3, r3, #4
 8002600:	6213      	str	r3, [r2, #32]
 8002602:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	4a27      	ldr	r2, [pc, #156]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6213      	str	r3, [r2, #32]
 800260e:	e00b      	b.n	8002628 <HAL_RCC_OscConfig+0x8a0>
 8002610:	4b24      	ldr	r3, [pc, #144]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	4a23      	ldr	r2, [pc, #140]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 8002616:	f023 0301 	bic.w	r3, r3, #1
 800261a:	6213      	str	r3, [r2, #32]
 800261c:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4a20      	ldr	r2, [pc, #128]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 8002622:	f023 0304 	bic.w	r3, r3, #4
 8002626:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002628:	1d3b      	adds	r3, r7, #4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d06a      	beq.n	8002708 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002632:	f7ff f90b 	bl	800184c <HAL_GetTick>
 8002636:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263a:	e00b      	b.n	8002654 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800263c:	f7ff f906 	bl	800184c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	f241 3288 	movw	r2, #5000	; 0x1388
 800264c:	4293      	cmp	r3, r2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e2a7      	b.n	8002ba4 <HAL_RCC_OscConfig+0xe1c>
 8002654:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002658:	2202      	movs	r2, #2
 800265a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	fa93 f2a3 	rbit	r2, r3
 8002666:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002670:	2202      	movs	r2, #2
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	fa93 f2a3 	rbit	r2, r3
 800267e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002682:	601a      	str	r2, [r3, #0]
  return result;
 8002684:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002688:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268a:	fab3 f383 	clz	r3, r3
 800268e:	b2db      	uxtb	r3, r3
 8002690:	095b      	lsrs	r3, r3, #5
 8002692:	b2db      	uxtb	r3, r3
 8002694:	f043 0302 	orr.w	r3, r3, #2
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d108      	bne.n	80026b0 <HAL_RCC_OscConfig+0x928>
 800269e:	4b01      	ldr	r3, [pc, #4]	; (80026a4 <HAL_RCC_OscConfig+0x91c>)
 80026a0:	6a1b      	ldr	r3, [r3, #32]
 80026a2:	e013      	b.n	80026cc <HAL_RCC_OscConfig+0x944>
 80026a4:	40021000 	.word	0x40021000
 80026a8:	10908120 	.word	0x10908120
 80026ac:	40007000 	.word	0x40007000
 80026b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026b4:	2202      	movs	r2, #2
 80026b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	fa93 f2a3 	rbit	r2, r3
 80026c2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	4bc0      	ldr	r3, [pc, #768]	; (80029cc <HAL_RCC_OscConfig+0xc44>)
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80026d0:	2102      	movs	r1, #2
 80026d2:	6011      	str	r1, [r2, #0]
 80026d4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	fa92 f1a2 	rbit	r1, r2
 80026de:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80026e2:	6011      	str	r1, [r2, #0]
  return result;
 80026e4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80026e8:	6812      	ldr	r2, [r2, #0]
 80026ea:	fab2 f282 	clz	r2, r2
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f002 021f 	and.w	r2, r2, #31
 80026fa:	2101      	movs	r1, #1
 80026fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d09a      	beq.n	800263c <HAL_RCC_OscConfig+0x8b4>
 8002706:	e063      	b.n	80027d0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002708:	f7ff f8a0 	bl	800184c <HAL_GetTick>
 800270c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002710:	e00b      	b.n	800272a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002712:	f7ff f89b 	bl	800184c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e23c      	b.n	8002ba4 <HAL_RCC_OscConfig+0xe1c>
 800272a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800272e:	2202      	movs	r2, #2
 8002730:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002732:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	fa93 f2a3 	rbit	r2, r3
 800273c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002746:	2202      	movs	r2, #2
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	fa93 f2a3 	rbit	r2, r3
 8002754:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002758:	601a      	str	r2, [r3, #0]
  return result;
 800275a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800275e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f043 0302 	orr.w	r3, r3, #2
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d102      	bne.n	800277a <HAL_RCC_OscConfig+0x9f2>
 8002774:	4b95      	ldr	r3, [pc, #596]	; (80029cc <HAL_RCC_OscConfig+0xc44>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	e00d      	b.n	8002796 <HAL_RCC_OscConfig+0xa0e>
 800277a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800277e:	2202      	movs	r2, #2
 8002780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002782:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	fa93 f2a3 	rbit	r2, r3
 800278c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	4b8e      	ldr	r3, [pc, #568]	; (80029cc <HAL_RCC_OscConfig+0xc44>)
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800279a:	2102      	movs	r1, #2
 800279c:	6011      	str	r1, [r2, #0]
 800279e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	fa92 f1a2 	rbit	r1, r2
 80027a8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80027ac:	6011      	str	r1, [r2, #0]
  return result;
 80027ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	fab2 f282 	clz	r2, r2
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	f002 021f 	and.w	r2, r2, #31
 80027c4:	2101      	movs	r1, #1
 80027c6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1a0      	bne.n	8002712 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027d0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d8:	4b7c      	ldr	r3, [pc, #496]	; (80029cc <HAL_RCC_OscConfig+0xc44>)
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	4a7b      	ldr	r2, [pc, #492]	; (80029cc <HAL_RCC_OscConfig+0xc44>)
 80027de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027e4:	1d3b      	adds	r3, r7, #4
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 81d9 	beq.w	8002ba2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027f0:	4b76      	ldr	r3, [pc, #472]	; (80029cc <HAL_RCC_OscConfig+0xc44>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	f000 81a6 	beq.w	8002b4a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027fe:	1d3b      	adds	r3, r7, #4
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b02      	cmp	r3, #2
 8002806:	f040 811e 	bne.w	8002a46 <HAL_RCC_OscConfig+0xcbe>
 800280a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800280e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002812:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002814:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fa93 f2a3 	rbit	r2, r3
 800281e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002822:	601a      	str	r2, [r3, #0]
  return result;
 8002824:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002828:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002834:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	461a      	mov	r2, r3
 800283c:	2300      	movs	r3, #0
 800283e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7ff f804 	bl	800184c <HAL_GetTick>
 8002844:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002848:	e009      	b.n	800285e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284a:	f7fe ffff 	bl	800184c <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e1a2      	b.n	8002ba4 <HAL_RCC_OscConfig+0xe1c>
 800285e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002866:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	fa93 f2a3 	rbit	r2, r3
 8002872:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002876:	601a      	str	r2, [r3, #0]
  return result;
 8002878:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800287c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	095b      	lsrs	r3, r3, #5
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d102      	bne.n	8002898 <HAL_RCC_OscConfig+0xb10>
 8002892:	4b4e      	ldr	r3, [pc, #312]	; (80029cc <HAL_RCC_OscConfig+0xc44>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	e01b      	b.n	80028d0 <HAL_RCC_OscConfig+0xb48>
 8002898:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800289c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	fa93 f2a3 	rbit	r2, r3
 80028ac:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	fa93 f2a3 	rbit	r2, r3
 80028c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	4b3f      	ldr	r3, [pc, #252]	; (80029cc <HAL_RCC_OscConfig+0xc44>)
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80028d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028d8:	6011      	str	r1, [r2, #0]
 80028da:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	fa92 f1a2 	rbit	r1, r2
 80028e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80028e8:	6011      	str	r1, [r2, #0]
  return result;
 80028ea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	fab2 f282 	clz	r2, r2
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	f042 0220 	orr.w	r2, r2, #32
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	f002 021f 	and.w	r2, r2, #31
 8002900:	2101      	movs	r1, #1
 8002902:	fa01 f202 	lsl.w	r2, r1, r2
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d19e      	bne.n	800284a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290c:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <HAL_RCC_OscConfig+0xc44>)
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	f023 020f 	bic.w	r2, r3, #15
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	492c      	ldr	r1, [pc, #176]	; (80029cc <HAL_RCC_OscConfig+0xc44>)
 800291c:	4313      	orrs	r3, r2
 800291e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002920:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <HAL_RCC_OscConfig+0xc44>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6a19      	ldr	r1, [r3, #32]
 800292e:	1d3b      	adds	r3, r7, #4
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	430b      	orrs	r3, r1
 8002936:	4925      	ldr	r1, [pc, #148]	; (80029cc <HAL_RCC_OscConfig+0xc44>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
 800293c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002940:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002944:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	fa93 f2a3 	rbit	r2, r3
 8002950:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002954:	601a      	str	r2, [r3, #0]
  return result;
 8002956:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800295a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002966:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	461a      	mov	r2, r3
 800296e:	2301      	movs	r3, #1
 8002970:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002972:	f7fe ff6b 	bl	800184c <HAL_GetTick>
 8002976:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800297a:	e009      	b.n	8002990 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800297c:	f7fe ff66 	bl	800184c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e109      	b.n	8002ba4 <HAL_RCC_OscConfig+0xe1c>
 8002990:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002994:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002998:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	fa93 f2a3 	rbit	r2, r3
 80029a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029a8:	601a      	str	r2, [r3, #0]
  return result;
 80029aa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029b0:	fab3 f383 	clz	r3, r3
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <HAL_RCC_OscConfig+0xc48>
 80029c4:	4b01      	ldr	r3, [pc, #4]	; (80029cc <HAL_RCC_OscConfig+0xc44>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	e01e      	b.n	8002a08 <HAL_RCC_OscConfig+0xc80>
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000
 80029d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	fa93 f2a3 	rbit	r2, r3
 80029e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	fa93 f2a3 	rbit	r2, r3
 80029fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	4b6a      	ldr	r3, [pc, #424]	; (8002bb0 <HAL_RCC_OscConfig+0xe28>)
 8002a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a08:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a10:	6011      	str	r1, [r2, #0]
 8002a12:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	fa92 f1a2 	rbit	r1, r2
 8002a1c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a20:	6011      	str	r1, [r2, #0]
  return result;
 8002a22:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	fab2 f282 	clz	r2, r2
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	f042 0220 	orr.w	r2, r2, #32
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	f002 021f 	and.w	r2, r2, #31
 8002a38:	2101      	movs	r1, #1
 8002a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a3e:	4013      	ands	r3, r2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d09b      	beq.n	800297c <HAL_RCC_OscConfig+0xbf4>
 8002a44:	e0ad      	b.n	8002ba2 <HAL_RCC_OscConfig+0xe1a>
 8002a46:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	fa93 f2a3 	rbit	r2, r3
 8002a5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a5e:	601a      	str	r2, [r3, #0]
  return result;
 8002a60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a64:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	461a      	mov	r2, r3
 8002a78:	2300      	movs	r3, #0
 8002a7a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7fe fee6 	bl	800184c <HAL_GetTick>
 8002a80:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a84:	e009      	b.n	8002a9a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a86:	f7fe fee1 	bl	800184c <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e084      	b.n	8002ba4 <HAL_RCC_OscConfig+0xe1c>
 8002a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	fa93 f2a3 	rbit	r2, r3
 8002aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ab2:	601a      	str	r2, [r3, #0]
  return result;
 8002ab4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ab8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d102      	bne.n	8002ad4 <HAL_RCC_OscConfig+0xd4c>
 8002ace:	4b38      	ldr	r3, [pc, #224]	; (8002bb0 <HAL_RCC_OscConfig+0xe28>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	e01b      	b.n	8002b0c <HAL_RCC_OscConfig+0xd84>
 8002ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	fa93 f2a3 	rbit	r2, r3
 8002ae8:	f107 0320 	add.w	r3, r7, #32
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f107 031c 	add.w	r3, r7, #28
 8002af2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	f107 031c 	add.w	r3, r7, #28
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	fa93 f2a3 	rbit	r2, r3
 8002b02:	f107 0318 	add.w	r3, r7, #24
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	4b29      	ldr	r3, [pc, #164]	; (8002bb0 <HAL_RCC_OscConfig+0xe28>)
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	f107 0214 	add.w	r2, r7, #20
 8002b10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b14:	6011      	str	r1, [r2, #0]
 8002b16:	f107 0214 	add.w	r2, r7, #20
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	fa92 f1a2 	rbit	r1, r2
 8002b20:	f107 0210 	add.w	r2, r7, #16
 8002b24:	6011      	str	r1, [r2, #0]
  return result;
 8002b26:	f107 0210 	add.w	r2, r7, #16
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	fab2 f282 	clz	r2, r2
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	f042 0220 	orr.w	r2, r2, #32
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	f002 021f 	and.w	r2, r2, #31
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d19e      	bne.n	8002a86 <HAL_RCC_OscConfig+0xcfe>
 8002b48:	e02b      	b.n	8002ba2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e025      	b.n	8002ba4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b58:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_RCC_OscConfig+0xe28>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002b60:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <HAL_RCC_OscConfig+0xe28>)
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b68:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b6c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d111      	bne.n	8002b9e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b7a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002b7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d108      	bne.n	8002b9e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002b8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b90:	f003 020f 	and.w	r2, r3, #15
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d001      	beq.n	8002ba2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000

08002bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b09e      	sub	sp, #120	; 0x78
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e162      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b90      	ldr	r3, [pc, #576]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d910      	bls.n	8002bfc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b8d      	ldr	r3, [pc, #564]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 0207 	bic.w	r2, r3, #7
 8002be2:	498b      	ldr	r1, [pc, #556]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b89      	ldr	r3, [pc, #548]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e14a      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c08:	4b82      	ldr	r3, [pc, #520]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	497f      	ldr	r1, [pc, #508]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80dc 	beq.w	8002de0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d13c      	bne.n	8002caa <HAL_RCC_ClockConfig+0xf6>
 8002c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c34:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c38:	fa93 f3a3 	rbit	r3, r3
 8002c3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d102      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xa6>
 8002c54:	4b6f      	ldr	r3, [pc, #444]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	e00f      	b.n	8002c7a <HAL_RCC_ClockConfig+0xc6>
 8002c5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c62:	fa93 f3a3 	rbit	r3, r3
 8002c66:	667b      	str	r3, [r7, #100]	; 0x64
 8002c68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c6c:	663b      	str	r3, [r7, #96]	; 0x60
 8002c6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c76:	4b67      	ldr	r3, [pc, #412]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002c80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c82:	fa92 f2a2 	rbit	r2, r2
 8002c86:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002c88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002c8a:	fab2 f282 	clz	r2, r2
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	f042 0220 	orr.w	r2, r2, #32
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	f002 021f 	and.w	r2, r2, #31
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d17b      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e0f3      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d13c      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x178>
 8002cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cb6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cba:	fa93 f3a3 	rbit	r3, r3
 8002cbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc2:	fab3 f383 	clz	r3, r3
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d102      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x128>
 8002cd6:	4b4f      	ldr	r3, [pc, #316]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	e00f      	b.n	8002cfc <HAL_RCC_ClockConfig+0x148>
 8002cdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cee:	643b      	str	r3, [r7, #64]	; 0x40
 8002cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf2:	fa93 f3a3 	rbit	r3, r3
 8002cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf8:	4b46      	ldr	r3, [pc, #280]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d00:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d04:	fa92 f2a2 	rbit	r2, r2
 8002d08:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d0c:	fab2 f282 	clz	r2, r2
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	f042 0220 	orr.w	r2, r2, #32
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	f002 021f 	and.w	r2, r2, #31
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d13a      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0b2      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d102      	bne.n	8002d54 <HAL_RCC_ClockConfig+0x1a0>
 8002d4e:	4b31      	ldr	r3, [pc, #196]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	e00d      	b.n	8002d70 <HAL_RCC_ClockConfig+0x1bc>
 8002d54:	2302      	movs	r3, #2
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d60:	2302      	movs	r3, #2
 8002d62:	623b      	str	r3, [r7, #32]
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	61fb      	str	r3, [r7, #28]
 8002d6c:	4b29      	ldr	r3, [pc, #164]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	2202      	movs	r2, #2
 8002d72:	61ba      	str	r2, [r7, #24]
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	fa92 f2a2 	rbit	r2, r2
 8002d7a:	617a      	str	r2, [r7, #20]
  return result;
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	fab2 f282 	clz	r2, r2
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	f042 0220 	orr.w	r2, r2, #32
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f002 021f 	and.w	r2, r2, #31
 8002d8e:	2101      	movs	r1, #1
 8002d90:	fa01 f202 	lsl.w	r2, r1, r2
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e079      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d9e:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f023 0203 	bic.w	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	491a      	ldr	r1, [pc, #104]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db0:	f7fe fd4c 	bl	800184c <HAL_GetTick>
 8002db4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db8:	f7fe fd48 	bl	800184c <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e061      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <HAL_RCC_ClockConfig+0x260>)
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 020c 	and.w	r2, r3, #12
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d1eb      	bne.n	8002db8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d214      	bcs.n	8002e18 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b08      	ldr	r3, [pc, #32]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 0207 	bic.w	r2, r3, #7
 8002df6:	4906      	ldr	r1, [pc, #24]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b04      	ldr	r3, [pc, #16]	; (8002e10 <HAL_RCC_ClockConfig+0x25c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e040      	b.n	8002e92 <HAL_RCC_ClockConfig+0x2de>
 8002e10:	40022000 	.word	0x40022000
 8002e14:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_RCC_ClockConfig+0x2e8>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	491a      	ldr	r1, [pc, #104]	; (8002e9c <HAL_RCC_ClockConfig+0x2e8>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0308 	and.w	r3, r3, #8
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <HAL_RCC_ClockConfig+0x2e8>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4912      	ldr	r1, [pc, #72]	; (8002e9c <HAL_RCC_ClockConfig+0x2e8>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e56:	f000 f85d 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 8002e5a:	4601      	mov	r1, r0
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <HAL_RCC_ClockConfig+0x2e8>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e64:	22f0      	movs	r2, #240	; 0xf0
 8002e66:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	fa92 f2a2 	rbit	r2, r2
 8002e6e:	60fa      	str	r2, [r7, #12]
  return result;
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	fab2 f282 	clz	r2, r2
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	40d3      	lsrs	r3, r2
 8002e7a:	4a09      	ldr	r2, [pc, #36]	; (8002ea0 <HAL_RCC_ClockConfig+0x2ec>)
 8002e7c:	5cd3      	ldrb	r3, [r2, r3]
 8002e7e:	fa21 f303 	lsr.w	r3, r1, r3
 8002e82:	4a08      	ldr	r2, [pc, #32]	; (8002ea4 <HAL_RCC_ClockConfig+0x2f0>)
 8002e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002e86:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <HAL_RCC_ClockConfig+0x2f4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fc9a 	bl	80017c4 <HAL_InitTick>
  
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3778      	adds	r7, #120	; 0x78
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	08005ae8 	.word	0x08005ae8
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000004 	.word	0x20000004

08002eac <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08a      	sub	sp, #40	; 0x28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8002ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ec8:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002ece:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <HAL_RCC_MCOConfig+0x64>)
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	4a0f      	ldr	r2, [pc, #60]	; (8002f10 <HAL_RCC_MCOConfig+0x64>)
 8002ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ed8:	6153      	str	r3, [r2, #20]
 8002eda:	4b0d      	ldr	r3, [pc, #52]	; (8002f10 <HAL_RCC_MCOConfig+0x64>)
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002ee6:	f107 0314 	add.w	r3, r7, #20
 8002eea:	4619      	mov	r1, r3
 8002eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ef0:	f7fe fdc0 	bl	8001a74 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_RCC_MCOConfig+0x64>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	430b      	orrs	r3, r1
 8002f02:	4903      	ldr	r1, [pc, #12]	; (8002f10 <HAL_RCC_MCOConfig+0x64>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
}
 8002f08:	bf00      	nop
 8002f0a:	3728      	adds	r7, #40	; 0x28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000

08002f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b08b      	sub	sp, #44	; 0x2c
 8002f18:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61bb      	str	r3, [r7, #24]
 8002f22:	2300      	movs	r3, #0
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002f2e:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d002      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0x30>
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d003      	beq.n	8002f4a <HAL_RCC_GetSysClockFreq+0x36>
 8002f42:	e03f      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f44:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f46:	623b      	str	r3, [r7, #32]
      break;
 8002f48:	e03f      	b.n	8002fca <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002f50:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002f54:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	68ba      	ldr	r2, [r7, #8]
 8002f58:	fa92 f2a2 	rbit	r2, r2
 8002f5c:	607a      	str	r2, [r7, #4]
  return result;
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	fab2 f282 	clz	r2, r2
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	40d3      	lsrs	r3, r2
 8002f68:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002f6a:	5cd3      	ldrb	r3, [r2, r3]
 8002f6c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	220f      	movs	r2, #15
 8002f78:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	fa92 f2a2 	rbit	r2, r2
 8002f80:	60fa      	str	r2, [r7, #12]
  return result;
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	fab2 f282 	clz	r2, r2
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	40d3      	lsrs	r3, r2
 8002f8c:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002f8e:	5cd3      	ldrb	r3, [r2, r3]
 8002f90:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f9c:	4a0f      	ldr	r2, [pc, #60]	; (8002fdc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
 8002fac:	e007      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002fae:	4a0b      	ldr	r2, [pc, #44]	; (8002fdc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	fb02 f303 	mul.w	r3, r2, r3
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	623b      	str	r3, [r7, #32]
      break;
 8002fc2:	e002      	b.n	8002fca <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002fc6:	623b      	str	r3, [r7, #32]
      break;
 8002fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fca:	6a3b      	ldr	r3, [r7, #32]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	372c      	adds	r7, #44	; 0x2c
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	007a1200 	.word	0x007a1200
 8002fe0:	08005b00 	.word	0x08005b00
 8002fe4:	08005b10 	.word	0x08005b10

08002fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8002fee:	681b      	ldr	r3, [r3, #0]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	20000000 	.word	0x20000000

08003000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003006:	f7ff ffef 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 800300a:	4601      	mov	r1, r0
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003014:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003018:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	fa92 f2a2 	rbit	r2, r2
 8003020:	603a      	str	r2, [r7, #0]
  return result;
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	fab2 f282 	clz	r2, r2
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	40d3      	lsrs	r3, r2
 800302c:	4a04      	ldr	r2, [pc, #16]	; (8003040 <HAL_RCC_GetPCLK1Freq+0x40>)
 800302e:	5cd3      	ldrb	r3, [r2, r3]
 8003030:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	08005af8 	.word	0x08005af8

08003044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800304a:	f7ff ffcd 	bl	8002fe8 <HAL_RCC_GetHCLKFreq>
 800304e:	4601      	mov	r1, r0
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003058:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800305c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	fa92 f2a2 	rbit	r2, r2
 8003064:	603a      	str	r2, [r7, #0]
  return result;
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	fab2 f282 	clz	r2, r2
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	40d3      	lsrs	r3, r2
 8003070:	4a04      	ldr	r2, [pc, #16]	; (8003084 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003072:	5cd3      	ldrb	r3, [r2, r3]
 8003074:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40021000 	.word	0x40021000
 8003084:	08005af8 	.word	0x08005af8

08003088 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b092      	sub	sp, #72	; 0x48
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80d7 	beq.w	8003254 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ac:	4b4e      	ldr	r3, [pc, #312]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10e      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b8:	4b4b      	ldr	r3, [pc, #300]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	4a4a      	ldr	r2, [pc, #296]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c2:	61d3      	str	r3, [r2, #28]
 80030c4:	4b48      	ldr	r3, [pc, #288]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d6:	4b45      	ldr	r3, [pc, #276]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d118      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e2:	4b42      	ldr	r3, [pc, #264]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a41      	ldr	r2, [pc, #260]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80030e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ee:	f7fe fbad 	bl	800184c <HAL_GetTick>
 80030f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f4:	e008      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f6:	f7fe fba9 	bl	800184c <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b64      	cmp	r3, #100	; 0x64
 8003102:	d901      	bls.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e1d6      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003108:	4b38      	ldr	r3, [pc, #224]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0f0      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003114:	4b34      	ldr	r3, [pc, #208]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800311e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 8084 	beq.w	800322e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003130:	429a      	cmp	r2, r3
 8003132:	d07c      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003134:	4b2c      	ldr	r3, [pc, #176]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800313c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800313e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003142:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800314c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	461a      	mov	r2, r3
 8003156:	4b26      	ldr	r3, [pc, #152]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	461a      	mov	r2, r3
 800315e:	2301      	movs	r3, #1
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003166:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	fa93 f3a3 	rbit	r3, r3
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003172:	fab3 f383 	clz	r3, r3
 8003176:	b2db      	uxtb	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	4b1d      	ldr	r3, [pc, #116]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	461a      	mov	r2, r3
 8003182:	2300      	movs	r3, #0
 8003184:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003186:	4a18      	ldr	r2, [pc, #96]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800318c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d04b      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003196:	f7fe fb59 	bl	800184c <HAL_GetTick>
 800319a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800319c:	e00a      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319e:	f7fe fb55 	bl	800184c <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e180      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80031b4:	2302      	movs	r3, #2
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
 80031c0:	2302      	movs	r3, #2
 80031c2:	623b      	str	r3, [r7, #32]
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	fa93 f3a3 	rbit	r3, r3
 80031ca:	61fb      	str	r3, [r7, #28]
  return result;
 80031cc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ce:	fab3 f383 	clz	r3, r3
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	095b      	lsrs	r3, r3, #5
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d108      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80031e2:	4b01      	ldr	r3, [pc, #4]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	e00d      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80031e8:	40021000 	.word	0x40021000
 80031ec:	40007000 	.word	0x40007000
 80031f0:	10908100 	.word	0x10908100
 80031f4:	2302      	movs	r3, #2
 80031f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	4ba0      	ldr	r3, [pc, #640]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	2202      	movs	r2, #2
 8003206:	613a      	str	r2, [r7, #16]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	fa92 f2a2 	rbit	r2, r2
 800320e:	60fa      	str	r2, [r7, #12]
  return result;
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	fab2 f282 	clz	r2, r2
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	f002 021f 	and.w	r2, r2, #31
 8003222:	2101      	movs	r1, #1
 8003224:	fa01 f202 	lsl.w	r2, r1, r2
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0b7      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800322e:	4b95      	ldr	r3, [pc, #596]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	4992      	ldr	r1, [pc, #584]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800323c:	4313      	orrs	r3, r2
 800323e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003240:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003244:	2b01      	cmp	r3, #1
 8003246:	d105      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003248:	4b8e      	ldr	r3, [pc, #568]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	4a8d      	ldr	r2, [pc, #564]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800324e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003252:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003260:	4b88      	ldr	r3, [pc, #544]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003264:	f023 0203 	bic.w	r2, r3, #3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	4985      	ldr	r1, [pc, #532]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800326e:	4313      	orrs	r3, r2
 8003270:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d008      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800327e:	4b81      	ldr	r3, [pc, #516]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	497e      	ldr	r1, [pc, #504]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800328c:	4313      	orrs	r3, r2
 800328e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800329c:	4b79      	ldr	r3, [pc, #484]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	4976      	ldr	r1, [pc, #472]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0320 	and.w	r3, r3, #32
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d008      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032ba:	4b72      	ldr	r3, [pc, #456]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	f023 0210 	bic.w	r2, r3, #16
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	496f      	ldr	r1, [pc, #444]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d008      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80032d8:	4b6a      	ldr	r3, [pc, #424]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e4:	4967      	ldr	r1, [pc, #412]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032f6:	4b63      	ldr	r3, [pc, #396]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f023 0220 	bic.w	r2, r3, #32
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	4960      	ldr	r1, [pc, #384]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003304:	4313      	orrs	r3, r2
 8003306:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d008      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003314:	4b5b      	ldr	r3, [pc, #364]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	4958      	ldr	r1, [pc, #352]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003322:	4313      	orrs	r3, r2
 8003324:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003332:	4b54      	ldr	r3, [pc, #336]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	4951      	ldr	r1, [pc, #324]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003340:	4313      	orrs	r3, r2
 8003342:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003350:	4b4c      	ldr	r3, [pc, #304]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	4949      	ldr	r1, [pc, #292]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800335e:	4313      	orrs	r3, r2
 8003360:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800336a:	2b00      	cmp	r3, #0
 800336c:	d008      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800336e:	4b45      	ldr	r3, [pc, #276]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4942      	ldr	r1, [pc, #264]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800337c:	4313      	orrs	r3, r2
 800337e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800338c:	4b3d      	ldr	r3, [pc, #244]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800338e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003390:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003398:	493a      	ldr	r1, [pc, #232]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d008      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80033aa:	4b36      	ldr	r3, [pc, #216]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b6:	4933      	ldr	r1, [pc, #204]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80033c8:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d4:	492b      	ldr	r1, [pc, #172]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80033e6:	4b27      	ldr	r3, [pc, #156]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	4924      	ldr	r1, [pc, #144]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003404:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003408:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	491c      	ldr	r1, [pc, #112]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d008      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003422:	4b18      	ldr	r3, [pc, #96]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	4915      	ldr	r1, [pc, #84]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003430:	4313      	orrs	r3, r2
 8003432:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d008      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003444:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344c:	490d      	ldr	r1, [pc, #52]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800344e:	4313      	orrs	r3, r2
 8003450:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d008      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800345e:	4b09      	ldr	r3, [pc, #36]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346a:	4906      	ldr	r1, [pc, #24]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800346c:	4313      	orrs	r3, r2
 800346e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00c      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800347c:	4b01      	ldr	r3, [pc, #4]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	e002      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
 8003488:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003490:	490b      	ldr	r1, [pc, #44]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003492:	4313      	orrs	r3, r2
 8003494:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80034a2:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ae:	4904      	ldr	r1, [pc, #16]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3748      	adds	r7, #72	; 0x48
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000

080034c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e01d      	b.n	8003512 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f7fd fff8 	bl	80014e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3304      	adds	r3, #4
 8003500:	4619      	mov	r1, r3
 8003502:	4610      	mov	r0, r2
 8003504:	f000 fa70 	bl	80039e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d101      	bne.n	800352c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e01d      	b.n	8003568 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d106      	bne.n	8003546 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 f815 	bl	8003570 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2202      	movs	r2, #2
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3304      	adds	r3, #4
 8003556:	4619      	mov	r1, r3
 8003558:	4610      	mov	r0, r2
 800355a:	f000 fa45 	bl	80039e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2201      	movs	r2, #1
 8003594:	6839      	ldr	r1, [r7, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 fe64 	bl	8004264 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a21      	ldr	r2, [pc, #132]	; (8003628 <HAL_TIM_PWM_Start+0xa4>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d018      	beq.n	80035d8 <HAL_TIM_PWM_Start+0x54>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a20      	ldr	r2, [pc, #128]	; (800362c <HAL_TIM_PWM_Start+0xa8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d013      	beq.n	80035d8 <HAL_TIM_PWM_Start+0x54>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1e      	ldr	r2, [pc, #120]	; (8003630 <HAL_TIM_PWM_Start+0xac>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00e      	beq.n	80035d8 <HAL_TIM_PWM_Start+0x54>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <HAL_TIM_PWM_Start+0xb0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d009      	beq.n	80035d8 <HAL_TIM_PWM_Start+0x54>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1b      	ldr	r2, [pc, #108]	; (8003638 <HAL_TIM_PWM_Start+0xb4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <HAL_TIM_PWM_Start+0x54>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1a      	ldr	r2, [pc, #104]	; (800363c <HAL_TIM_PWM_Start+0xb8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d101      	bne.n	80035dc <HAL_TIM_PWM_Start+0x58>
 80035d8:	2301      	movs	r3, #1
 80035da:	e000      	b.n	80035de <HAL_TIM_PWM_Start+0x5a>
 80035dc:	2300      	movs	r3, #0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d007      	beq.n	80035f2 <HAL_TIM_PWM_Start+0x6e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <HAL_TIM_PWM_Start+0xbc>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b06      	cmp	r3, #6
 8003602:	d00b      	beq.n	800361c <HAL_TIM_PWM_Start+0x98>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360a:	d007      	beq.n	800361c <HAL_TIM_PWM_Start+0x98>
  {
    __HAL_TIM_ENABLE(htim);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	40012c00 	.word	0x40012c00
 800362c:	40013400 	.word	0x40013400
 8003630:	40014000 	.word	0x40014000
 8003634:	40014400 	.word	0x40014400
 8003638:	40014800 	.word	0x40014800
 800363c:	40015000 	.word	0x40015000
 8003640:	00010007 	.word	0x00010007

08003644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800365a:	2302      	movs	r3, #2
 800365c:	e105      	b.n	800386a <HAL_TIM_PWM_ConfigChannel+0x226>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2202      	movs	r2, #2
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b14      	cmp	r3, #20
 8003672:	f200 80f0 	bhi.w	8003856 <HAL_TIM_PWM_ConfigChannel+0x212>
 8003676:	a201      	add	r2, pc, #4	; (adr r2, 800367c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367c:	080036d1 	.word	0x080036d1
 8003680:	08003857 	.word	0x08003857
 8003684:	08003857 	.word	0x08003857
 8003688:	08003857 	.word	0x08003857
 800368c:	08003711 	.word	0x08003711
 8003690:	08003857 	.word	0x08003857
 8003694:	08003857 	.word	0x08003857
 8003698:	08003857 	.word	0x08003857
 800369c:	08003753 	.word	0x08003753
 80036a0:	08003857 	.word	0x08003857
 80036a4:	08003857 	.word	0x08003857
 80036a8:	08003857 	.word	0x08003857
 80036ac:	08003793 	.word	0x08003793
 80036b0:	08003857 	.word	0x08003857
 80036b4:	08003857 	.word	0x08003857
 80036b8:	08003857 	.word	0x08003857
 80036bc:	080037d5 	.word	0x080037d5
 80036c0:	08003857 	.word	0x08003857
 80036c4:	08003857 	.word	0x08003857
 80036c8:	08003857 	.word	0x08003857
 80036cc:	08003815 	.word	0x08003815
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fa24 	bl	8003b24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	699a      	ldr	r2, [r3, #24]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0208 	orr.w	r2, r2, #8
 80036ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0204 	bic.w	r2, r2, #4
 80036fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6999      	ldr	r1, [r3, #24]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	619a      	str	r2, [r3, #24]
      break;
 800370e:	e0a3      	b.n	8003858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68b9      	ldr	r1, [r7, #8]
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fa9e 	bl	8003c58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699a      	ldr	r2, [r3, #24]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800372a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800373a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6999      	ldr	r1, [r3, #24]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	021a      	lsls	r2, r3, #8
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	619a      	str	r2, [r3, #24]
      break;
 8003750:	e082      	b.n	8003858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	4618      	mov	r0, r3
 800375a:	f000 fb11 	bl	8003d80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69da      	ldr	r2, [r3, #28]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f042 0208 	orr.w	r2, r2, #8
 800376c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0204 	bic.w	r2, r2, #4
 800377c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69d9      	ldr	r1, [r3, #28]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	430a      	orrs	r2, r1
 800378e:	61da      	str	r2, [r3, #28]
      break;
 8003790:	e062      	b.n	8003858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fb83 	bl	8003ea4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69da      	ldr	r2, [r3, #28]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69d9      	ldr	r1, [r3, #28]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	021a      	lsls	r2, r3, #8
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	61da      	str	r2, [r3, #28]
      break;
 80037d2:	e041      	b.n	8003858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 fbd2 	bl	8003f84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0208 	orr.w	r2, r2, #8
 80037ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0204 	bic.w	r2, r2, #4
 80037fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003812:	e021      	b.n	8003858 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68b9      	ldr	r1, [r7, #8]
 800381a:	4618      	mov	r0, r3
 800381c:	f000 fc1c 	bl	8004058 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800382e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	021a      	lsls	r2, r3, #8
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003854:	e000      	b.n	8003858 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8003856:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop

08003874 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_TIM_ConfigClockSource+0x18>
 8003888:	2302      	movs	r3, #2
 800388a:	e0a8      	b.n	80039de <HAL_TIM_ConfigClockSource+0x16a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b40      	cmp	r3, #64	; 0x40
 80038c6:	d067      	beq.n	8003998 <HAL_TIM_ConfigClockSource+0x124>
 80038c8:	2b40      	cmp	r3, #64	; 0x40
 80038ca:	d80b      	bhi.n	80038e4 <HAL_TIM_ConfigClockSource+0x70>
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	d073      	beq.n	80039b8 <HAL_TIM_ConfigClockSource+0x144>
 80038d0:	2b10      	cmp	r3, #16
 80038d2:	d802      	bhi.n	80038da <HAL_TIM_ConfigClockSource+0x66>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d06f      	beq.n	80039b8 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80038d8:	e078      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80038da:	2b20      	cmp	r3, #32
 80038dc:	d06c      	beq.n	80039b8 <HAL_TIM_ConfigClockSource+0x144>
 80038de:	2b30      	cmp	r3, #48	; 0x30
 80038e0:	d06a      	beq.n	80039b8 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80038e2:	e073      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80038e4:	2b70      	cmp	r3, #112	; 0x70
 80038e6:	d00d      	beq.n	8003904 <HAL_TIM_ConfigClockSource+0x90>
 80038e8:	2b70      	cmp	r3, #112	; 0x70
 80038ea:	d804      	bhi.n	80038f6 <HAL_TIM_ConfigClockSource+0x82>
 80038ec:	2b50      	cmp	r3, #80	; 0x50
 80038ee:	d033      	beq.n	8003958 <HAL_TIM_ConfigClockSource+0xe4>
 80038f0:	2b60      	cmp	r3, #96	; 0x60
 80038f2:	d041      	beq.n	8003978 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80038f4:	e06a      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fa:	d066      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x156>
 80038fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003900:	d017      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003902:	e063      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6818      	ldr	r0, [r3, #0]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	6899      	ldr	r1, [r3, #8]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f000 fc86 	bl	8004224 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003926:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	609a      	str	r2, [r3, #8]
      break;
 8003930:	e04c      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	6899      	ldr	r1, [r3, #8]
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f000 fc6f 	bl	8004224 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003954:	609a      	str	r2, [r3, #8]
      break;
 8003956:	e039      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	6859      	ldr	r1, [r3, #4]
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	461a      	mov	r2, r3
 8003966:	f000 fbe3 	bl	8004130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2150      	movs	r1, #80	; 0x50
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fc3c 	bl	80041ee <TIM_ITRx_SetConfig>
      break;
 8003976:	e029      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6818      	ldr	r0, [r3, #0]
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	6859      	ldr	r1, [r3, #4]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	461a      	mov	r2, r3
 8003986:	f000 fc02 	bl	800418e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2160      	movs	r1, #96	; 0x60
 8003990:	4618      	mov	r0, r3
 8003992:	f000 fc2c 	bl	80041ee <TIM_ITRx_SetConfig>
      break;
 8003996:	e019      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	6859      	ldr	r1, [r3, #4]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	461a      	mov	r2, r3
 80039a6:	f000 fbc3 	bl	8004130 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2140      	movs	r1, #64	; 0x40
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fc1c 	bl	80041ee <TIM_ITRx_SetConfig>
      break;
 80039b6:	e009      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4619      	mov	r1, r3
 80039c2:	4610      	mov	r0, r2
 80039c4:	f000 fc13 	bl	80041ee <TIM_ITRx_SetConfig>
      break;
 80039c8:	e000      	b.n	80039cc <HAL_TIM_ConfigClockSource+0x158>
      break;
 80039ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a42      	ldr	r2, [pc, #264]	; (8003b04 <TIM_Base_SetConfig+0x11c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d013      	beq.n	8003a28 <TIM_Base_SetConfig+0x40>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a06:	d00f      	beq.n	8003a28 <TIM_Base_SetConfig+0x40>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a3f      	ldr	r2, [pc, #252]	; (8003b08 <TIM_Base_SetConfig+0x120>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00b      	beq.n	8003a28 <TIM_Base_SetConfig+0x40>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a3e      	ldr	r2, [pc, #248]	; (8003b0c <TIM_Base_SetConfig+0x124>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d007      	beq.n	8003a28 <TIM_Base_SetConfig+0x40>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a3d      	ldr	r2, [pc, #244]	; (8003b10 <TIM_Base_SetConfig+0x128>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d003      	beq.n	8003a28 <TIM_Base_SetConfig+0x40>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a3c      	ldr	r2, [pc, #240]	; (8003b14 <TIM_Base_SetConfig+0x12c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d108      	bne.n	8003a3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a31      	ldr	r2, [pc, #196]	; (8003b04 <TIM_Base_SetConfig+0x11c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d01f      	beq.n	8003a82 <TIM_Base_SetConfig+0x9a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a48:	d01b      	beq.n	8003a82 <TIM_Base_SetConfig+0x9a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a2e      	ldr	r2, [pc, #184]	; (8003b08 <TIM_Base_SetConfig+0x120>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d017      	beq.n	8003a82 <TIM_Base_SetConfig+0x9a>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a2d      	ldr	r2, [pc, #180]	; (8003b0c <TIM_Base_SetConfig+0x124>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <TIM_Base_SetConfig+0x9a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a2c      	ldr	r2, [pc, #176]	; (8003b10 <TIM_Base_SetConfig+0x128>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00f      	beq.n	8003a82 <TIM_Base_SetConfig+0x9a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a2c      	ldr	r2, [pc, #176]	; (8003b18 <TIM_Base_SetConfig+0x130>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00b      	beq.n	8003a82 <TIM_Base_SetConfig+0x9a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a2b      	ldr	r2, [pc, #172]	; (8003b1c <TIM_Base_SetConfig+0x134>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d007      	beq.n	8003a82 <TIM_Base_SetConfig+0x9a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a2a      	ldr	r2, [pc, #168]	; (8003b20 <TIM_Base_SetConfig+0x138>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d003      	beq.n	8003a82 <TIM_Base_SetConfig+0x9a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a25      	ldr	r2, [pc, #148]	; (8003b14 <TIM_Base_SetConfig+0x12c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d108      	bne.n	8003a94 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a12      	ldr	r2, [pc, #72]	; (8003b04 <TIM_Base_SetConfig+0x11c>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d013      	beq.n	8003ae8 <TIM_Base_SetConfig+0x100>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a13      	ldr	r2, [pc, #76]	; (8003b10 <TIM_Base_SetConfig+0x128>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00f      	beq.n	8003ae8 <TIM_Base_SetConfig+0x100>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a13      	ldr	r2, [pc, #76]	; (8003b18 <TIM_Base_SetConfig+0x130>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <TIM_Base_SetConfig+0x100>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a12      	ldr	r2, [pc, #72]	; (8003b1c <TIM_Base_SetConfig+0x134>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d007      	beq.n	8003ae8 <TIM_Base_SetConfig+0x100>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a11      	ldr	r2, [pc, #68]	; (8003b20 <TIM_Base_SetConfig+0x138>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_Base_SetConfig+0x100>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a0c      	ldr	r2, [pc, #48]	; (8003b14 <TIM_Base_SetConfig+0x12c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d103      	bne.n	8003af0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	615a      	str	r2, [r3, #20]
}
 8003af6:	bf00      	nop
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40012c00 	.word	0x40012c00
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40000800 	.word	0x40000800
 8003b10:	40013400 	.word	0x40013400
 8003b14:	40015000 	.word	0x40015000
 8003b18:	40014000 	.word	0x40014000
 8003b1c:	40014400 	.word	0x40014400
 8003b20:	40014800 	.word	0x40014800

08003b24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f023 0201 	bic.w	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f023 0303 	bic.w	r3, r3, #3
 8003b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f023 0302 	bic.w	r3, r3, #2
 8003b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a30      	ldr	r2, [pc, #192]	; (8003c40 <TIM_OC1_SetConfig+0x11c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d013      	beq.n	8003bac <TIM_OC1_SetConfig+0x88>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a2f      	ldr	r2, [pc, #188]	; (8003c44 <TIM_OC1_SetConfig+0x120>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00f      	beq.n	8003bac <TIM_OC1_SetConfig+0x88>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a2e      	ldr	r2, [pc, #184]	; (8003c48 <TIM_OC1_SetConfig+0x124>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00b      	beq.n	8003bac <TIM_OC1_SetConfig+0x88>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a2d      	ldr	r2, [pc, #180]	; (8003c4c <TIM_OC1_SetConfig+0x128>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d007      	beq.n	8003bac <TIM_OC1_SetConfig+0x88>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a2c      	ldr	r2, [pc, #176]	; (8003c50 <TIM_OC1_SetConfig+0x12c>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d003      	beq.n	8003bac <TIM_OC1_SetConfig+0x88>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a2b      	ldr	r2, [pc, #172]	; (8003c54 <TIM_OC1_SetConfig+0x130>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d10c      	bne.n	8003bc6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f023 0308 	bic.w	r3, r3, #8
 8003bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	697a      	ldr	r2, [r7, #20]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f023 0304 	bic.w	r3, r3, #4
 8003bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <TIM_OC1_SetConfig+0x11c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <TIM_OC1_SetConfig+0xd2>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <TIM_OC1_SetConfig+0x120>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d00f      	beq.n	8003bf6 <TIM_OC1_SetConfig+0xd2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a1b      	ldr	r2, [pc, #108]	; (8003c48 <TIM_OC1_SetConfig+0x124>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <TIM_OC1_SetConfig+0xd2>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a1a      	ldr	r2, [pc, #104]	; (8003c4c <TIM_OC1_SetConfig+0x128>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <TIM_OC1_SetConfig+0xd2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a19      	ldr	r2, [pc, #100]	; (8003c50 <TIM_OC1_SetConfig+0x12c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_OC1_SetConfig+0xd2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a18      	ldr	r2, [pc, #96]	; (8003c54 <TIM_OC1_SetConfig+0x130>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d111      	bne.n	8003c1a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	621a      	str	r2, [r3, #32]
}
 8003c34:	bf00      	nop
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	40012c00 	.word	0x40012c00
 8003c44:	40013400 	.word	0x40013400
 8003c48:	40014000 	.word	0x40014000
 8003c4c:	40014400 	.word	0x40014400
 8003c50:	40014800 	.word	0x40014800
 8003c54:	40015000 	.word	0x40015000

08003c58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	f023 0210 	bic.w	r2, r3, #16
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	021b      	lsls	r3, r3, #8
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f023 0320 	bic.w	r3, r3, #32
 8003ca6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a2c      	ldr	r2, [pc, #176]	; (8003d68 <TIM_OC2_SetConfig+0x110>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d007      	beq.n	8003ccc <TIM_OC2_SetConfig+0x74>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a2b      	ldr	r2, [pc, #172]	; (8003d6c <TIM_OC2_SetConfig+0x114>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d003      	beq.n	8003ccc <TIM_OC2_SetConfig+0x74>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a2a      	ldr	r2, [pc, #168]	; (8003d70 <TIM_OC2_SetConfig+0x118>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d10d      	bne.n	8003ce8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ce6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a1f      	ldr	r2, [pc, #124]	; (8003d68 <TIM_OC2_SetConfig+0x110>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d013      	beq.n	8003d18 <TIM_OC2_SetConfig+0xc0>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a1e      	ldr	r2, [pc, #120]	; (8003d6c <TIM_OC2_SetConfig+0x114>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00f      	beq.n	8003d18 <TIM_OC2_SetConfig+0xc0>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a1e      	ldr	r2, [pc, #120]	; (8003d74 <TIM_OC2_SetConfig+0x11c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d00b      	beq.n	8003d18 <TIM_OC2_SetConfig+0xc0>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <TIM_OC2_SetConfig+0x120>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d007      	beq.n	8003d18 <TIM_OC2_SetConfig+0xc0>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a1c      	ldr	r2, [pc, #112]	; (8003d7c <TIM_OC2_SetConfig+0x124>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_OC2_SetConfig+0xc0>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a17      	ldr	r2, [pc, #92]	; (8003d70 <TIM_OC2_SetConfig+0x118>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d113      	bne.n	8003d40 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d1e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d26:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	621a      	str	r2, [r3, #32]
}
 8003d5a:	bf00      	nop
 8003d5c:	371c      	adds	r7, #28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40012c00 	.word	0x40012c00
 8003d6c:	40013400 	.word	0x40013400
 8003d70:	40015000 	.word	0x40015000
 8003d74:	40014000 	.word	0x40014000
 8003d78:	40014400 	.word	0x40014400
 8003d7c:	40014800 	.word	0x40014800

08003d80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f023 0303 	bic.w	r3, r3, #3
 8003dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a2b      	ldr	r2, [pc, #172]	; (8003e8c <TIM_OC3_SetConfig+0x10c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d007      	beq.n	8003df2 <TIM_OC3_SetConfig+0x72>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a2a      	ldr	r2, [pc, #168]	; (8003e90 <TIM_OC3_SetConfig+0x110>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d003      	beq.n	8003df2 <TIM_OC3_SetConfig+0x72>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a29      	ldr	r2, [pc, #164]	; (8003e94 <TIM_OC3_SetConfig+0x114>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d10d      	bne.n	8003e0e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	021b      	lsls	r3, r3, #8
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e0c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a1e      	ldr	r2, [pc, #120]	; (8003e8c <TIM_OC3_SetConfig+0x10c>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d013      	beq.n	8003e3e <TIM_OC3_SetConfig+0xbe>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a1d      	ldr	r2, [pc, #116]	; (8003e90 <TIM_OC3_SetConfig+0x110>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00f      	beq.n	8003e3e <TIM_OC3_SetConfig+0xbe>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <TIM_OC3_SetConfig+0x118>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00b      	beq.n	8003e3e <TIM_OC3_SetConfig+0xbe>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <TIM_OC3_SetConfig+0x11c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d007      	beq.n	8003e3e <TIM_OC3_SetConfig+0xbe>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a1b      	ldr	r2, [pc, #108]	; (8003ea0 <TIM_OC3_SetConfig+0x120>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d003      	beq.n	8003e3e <TIM_OC3_SetConfig+0xbe>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a16      	ldr	r2, [pc, #88]	; (8003e94 <TIM_OC3_SetConfig+0x114>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d113      	bne.n	8003e66 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	621a      	str	r2, [r3, #32]
}
 8003e80:	bf00      	nop
 8003e82:	371c      	adds	r7, #28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	40012c00 	.word	0x40012c00
 8003e90:	40013400 	.word	0x40013400
 8003e94:	40015000 	.word	0x40015000
 8003e98:	40014000 	.word	0x40014000
 8003e9c:	40014400 	.word	0x40014400
 8003ea0:	40014800 	.word	0x40014800

08003ea4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	031b      	lsls	r3, r3, #12
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a1a      	ldr	r2, [pc, #104]	; (8003f6c <TIM_OC4_SetConfig+0xc8>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d013      	beq.n	8003f30 <TIM_OC4_SetConfig+0x8c>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a19      	ldr	r2, [pc, #100]	; (8003f70 <TIM_OC4_SetConfig+0xcc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00f      	beq.n	8003f30 <TIM_OC4_SetConfig+0x8c>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a18      	ldr	r2, [pc, #96]	; (8003f74 <TIM_OC4_SetConfig+0xd0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00b      	beq.n	8003f30 <TIM_OC4_SetConfig+0x8c>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a17      	ldr	r2, [pc, #92]	; (8003f78 <TIM_OC4_SetConfig+0xd4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d007      	beq.n	8003f30 <TIM_OC4_SetConfig+0x8c>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a16      	ldr	r2, [pc, #88]	; (8003f7c <TIM_OC4_SetConfig+0xd8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d003      	beq.n	8003f30 <TIM_OC4_SetConfig+0x8c>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <TIM_OC4_SetConfig+0xdc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d109      	bne.n	8003f44 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	019b      	lsls	r3, r3, #6
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	621a      	str	r2, [r3, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40013400 	.word	0x40013400
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800
 8003f80:	40015000 	.word	0x40015000

08003f84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003fc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	041b      	lsls	r3, r3, #16
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a19      	ldr	r2, [pc, #100]	; (8004040 <TIM_OC5_SetConfig+0xbc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d013      	beq.n	8004006 <TIM_OC5_SetConfig+0x82>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a18      	ldr	r2, [pc, #96]	; (8004044 <TIM_OC5_SetConfig+0xc0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00f      	beq.n	8004006 <TIM_OC5_SetConfig+0x82>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a17      	ldr	r2, [pc, #92]	; (8004048 <TIM_OC5_SetConfig+0xc4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00b      	beq.n	8004006 <TIM_OC5_SetConfig+0x82>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a16      	ldr	r2, [pc, #88]	; (800404c <TIM_OC5_SetConfig+0xc8>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d007      	beq.n	8004006 <TIM_OC5_SetConfig+0x82>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a15      	ldr	r2, [pc, #84]	; (8004050 <TIM_OC5_SetConfig+0xcc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d003      	beq.n	8004006 <TIM_OC5_SetConfig+0x82>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a14      	ldr	r2, [pc, #80]	; (8004054 <TIM_OC5_SetConfig+0xd0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d109      	bne.n	800401a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	4313      	orrs	r3, r2
 8004018:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	621a      	str	r2, [r3, #32]
}
 8004034:	bf00      	nop
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40012c00 	.word	0x40012c00
 8004044:	40013400 	.word	0x40013400
 8004048:	40014000 	.word	0x40014000
 800404c:	40014400 	.word	0x40014400
 8004050:	40014800 	.word	0x40014800
 8004054:	40015000 	.word	0x40015000

08004058 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800408a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	021b      	lsls	r3, r3, #8
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4313      	orrs	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800409e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	051b      	lsls	r3, r3, #20
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a1a      	ldr	r2, [pc, #104]	; (8004118 <TIM_OC6_SetConfig+0xc0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d013      	beq.n	80040dc <TIM_OC6_SetConfig+0x84>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a19      	ldr	r2, [pc, #100]	; (800411c <TIM_OC6_SetConfig+0xc4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00f      	beq.n	80040dc <TIM_OC6_SetConfig+0x84>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a18      	ldr	r2, [pc, #96]	; (8004120 <TIM_OC6_SetConfig+0xc8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00b      	beq.n	80040dc <TIM_OC6_SetConfig+0x84>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a17      	ldr	r2, [pc, #92]	; (8004124 <TIM_OC6_SetConfig+0xcc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d007      	beq.n	80040dc <TIM_OC6_SetConfig+0x84>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a16      	ldr	r2, [pc, #88]	; (8004128 <TIM_OC6_SetConfig+0xd0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_OC6_SetConfig+0x84>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a15      	ldr	r2, [pc, #84]	; (800412c <TIM_OC6_SetConfig+0xd4>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d109      	bne.n	80040f0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	029b      	lsls	r3, r3, #10
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	621a      	str	r2, [r3, #32]
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40012c00 	.word	0x40012c00
 800411c:	40013400 	.word	0x40013400
 8004120:	40014000 	.word	0x40014000
 8004124:	40014400 	.word	0x40014400
 8004128:	40014800 	.word	0x40014800
 800412c:	40015000 	.word	0x40015000

08004130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	f023 0201 	bic.w	r2, r3, #1
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800415a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	4313      	orrs	r3, r2
 8004164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f023 030a 	bic.w	r3, r3, #10
 800416c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	621a      	str	r2, [r3, #32]
}
 8004182:	bf00      	nop
 8004184:	371c      	adds	r7, #28
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800418e:	b480      	push	{r7}
 8004190:	b087      	sub	sp, #28
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f023 0210 	bic.w	r2, r3, #16
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	031b      	lsls	r3, r3, #12
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	bf00      	nop
 80041e4:	371c      	adds	r7, #28
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b085      	sub	sp, #20
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004204:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	f043 0307 	orr.w	r3, r3, #7
 8004210:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	609a      	str	r2, [r3, #8]
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800423e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	021a      	lsls	r2, r3, #8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	431a      	orrs	r2, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	4313      	orrs	r3, r2
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	609a      	str	r2, [r3, #8]
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 031f 	and.w	r3, r3, #31
 8004276:	2201      	movs	r2, #1
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6a1a      	ldr	r2, [r3, #32]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	43db      	mvns	r3, r3
 8004286:	401a      	ands	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6a1a      	ldr	r2, [r3, #32]
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	fa01 f303 	lsl.w	r3, r1, r3
 800429c:	431a      	orrs	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	621a      	str	r2, [r3, #32]
}
 80042a2:	bf00      	nop
 80042a4:	371c      	adds	r7, #28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
	...

080042b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e06d      	b.n	80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a30      	ldr	r2, [pc, #192]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d009      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a2f      	ldr	r2, [pc, #188]	; (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d004      	beq.n	8004306 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a2d      	ldr	r2, [pc, #180]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d108      	bne.n	8004318 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800430c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a1e      	ldr	r2, [pc, #120]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d01d      	beq.n	8004378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004344:	d018      	beq.n	8004378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d013      	beq.n	8004378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a1a      	ldr	r2, [pc, #104]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00e      	beq.n	8004378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a15      	ldr	r2, [pc, #84]	; (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d009      	beq.n	8004378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a16      	ldr	r2, [pc, #88]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a11      	ldr	r2, [pc, #68]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d10c      	bne.n	8004392 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800437e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	4313      	orrs	r3, r2
 8004388:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	40012c00 	.word	0x40012c00
 80043b4:	40013400 	.word	0x40013400
 80043b8:	40015000 	.word	0x40015000
 80043bc:	40000400 	.word	0x40000400
 80043c0:	40000800 	.word	0x40000800
 80043c4:	40014000 	.word	0x40014000

080043c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e06a      	b.n	80044ba <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	041b      	lsls	r3, r3, #16
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a19      	ldr	r2, [pc, #100]	; (80044c8 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a17      	ldr	r2, [pc, #92]	; (80044cc <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a16      	ldr	r2, [pc, #88]	; (80044d0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d115      	bne.n	80044a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	051b      	lsls	r3, r3, #20
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40012c00 	.word	0x40012c00
 80044cc:	40013400 	.word	0x40013400
 80044d0:	40015000 	.word	0x40015000

080044d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e040      	b.n	8004568 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fd f87e 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2224      	movs	r2, #36	; 0x24
 8004500:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f022 0201 	bic.w	r2, r2, #1
 8004510:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f96c 	bl	80047f0 <UART_SetConfig>
 8004518:	4603      	mov	r3, r0
 800451a:	2b01      	cmp	r3, #1
 800451c:	d101      	bne.n	8004522 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e022      	b.n	8004568 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fb7a 	bl	8004c24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800453e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800454e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0201 	orr.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fc01 	bl	8004d68 <UART_CheckIdleState>
 8004566:	4603      	mov	r3, r0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	; 0x28
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	4613      	mov	r3, r2
 800457e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004584:	2b20      	cmp	r3, #32
 8004586:	f040 8081 	bne.w	800468c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <HAL_UART_Transmit+0x26>
 8004590:	88fb      	ldrh	r3, [r7, #6]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e079      	b.n	800468e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_UART_Transmit+0x38>
 80045a4:	2302      	movs	r3, #2
 80045a6:	e072      	b.n	800468e <HAL_UART_Transmit+0x11e>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2221      	movs	r2, #33	; 0x21
 80045ba:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80045bc:	f7fd f946 	bl	800184c <HAL_GetTick>
 80045c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	88fa      	ldrh	r2, [r7, #6]
 80045c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	88fa      	ldrh	r2, [r7, #6]
 80045ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045da:	d108      	bne.n	80045ee <HAL_UART_Transmit+0x7e>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d104      	bne.n	80045ee <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80045e4:	2300      	movs	r3, #0
 80045e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	e003      	b.n	80045f6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045f6:	e02d      	b.n	8004654 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2200      	movs	r2, #0
 8004600:	2180      	movs	r1, #128	; 0x80
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 fbf5 	bl	8004df2 <UART_WaitOnFlagUntilTimeout>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e03d      	b.n	800468e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10b      	bne.n	8004630 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	881a      	ldrh	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004624:	b292      	uxth	r2, r2
 8004626:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	3302      	adds	r3, #2
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	e008      	b.n	8004642 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	781a      	ldrb	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	b292      	uxth	r2, r2
 800463a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	3301      	adds	r3, #1
 8004640:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1cb      	bne.n	80045f8 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	9300      	str	r3, [sp, #0]
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	2200      	movs	r2, #0
 8004668:	2140      	movs	r1, #64	; 0x40
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fbc1 	bl	8004df2 <UART_WaitOnFlagUntilTimeout>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e009      	b.n	800468e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2220      	movs	r2, #32
 800467e:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	e000      	b.n	800468e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800468c:	2302      	movs	r3, #2
  }
}
 800468e:	4618      	mov	r0, r3
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	4613      	mov	r3, r2
 80046a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	f040 808a 	bne.w	80047c4 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <HAL_UART_Receive_IT+0x24>
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e082      	b.n	80047c6 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d101      	bne.n	80046ce <HAL_UART_Receive_IT+0x36>
 80046ca:	2302      	movs	r3, #2
 80046cc:	e07b      	b.n	80047c6 <HAL_UART_Receive_IT+0x12e>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	68ba      	ldr	r2, [r7, #8]
 80046da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	88fa      	ldrh	r2, [r7, #6]
 80046e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	88fa      	ldrh	r2, [r7, #6]
 80046e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fa:	d10e      	bne.n	800471a <HAL_UART_Receive_IT+0x82>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d105      	bne.n	8004710 <HAL_UART_Receive_IT+0x78>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f240 12ff 	movw	r2, #511	; 0x1ff
 800470a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800470e:	e02d      	b.n	800476c <HAL_UART_Receive_IT+0xd4>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	22ff      	movs	r2, #255	; 0xff
 8004714:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004718:	e028      	b.n	800476c <HAL_UART_Receive_IT+0xd4>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10d      	bne.n	800473e <HAL_UART_Receive_IT+0xa6>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d104      	bne.n	8004734 <HAL_UART_Receive_IT+0x9c>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	22ff      	movs	r2, #255	; 0xff
 800472e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004732:	e01b      	b.n	800476c <HAL_UART_Receive_IT+0xd4>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	227f      	movs	r2, #127	; 0x7f
 8004738:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800473c:	e016      	b.n	800476c <HAL_UART_Receive_IT+0xd4>
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004746:	d10d      	bne.n	8004764 <HAL_UART_Receive_IT+0xcc>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d104      	bne.n	800475a <HAL_UART_Receive_IT+0xc2>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	227f      	movs	r2, #127	; 0x7f
 8004754:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004758:	e008      	b.n	800476c <HAL_UART_Receive_IT+0xd4>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	223f      	movs	r2, #63	; 0x3f
 800475e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004762:	e003      	b.n	800476c <HAL_UART_Receive_IT+0xd4>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2222      	movs	r2, #34	; 0x22
 8004776:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	689a      	ldr	r2, [r3, #8]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004790:	d107      	bne.n	80047a2 <HAL_UART_Receive_IT+0x10a>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d103      	bne.n	80047a2 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4a0d      	ldr	r2, [pc, #52]	; (80047d4 <HAL_UART_Receive_IT+0x13c>)
 800479e:	661a      	str	r2, [r3, #96]	; 0x60
 80047a0:	e002      	b.n	80047a8 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4a0c      	ldr	r2, [pc, #48]	; (80047d8 <HAL_UART_Receive_IT+0x140>)
 80047a6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80047be:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	e000      	b.n	80047c6 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80047c4:	2302      	movs	r3, #2
  }
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	08004f8f 	.word	0x08004f8f
 80047d8:	08004ee9 	.word	0x08004ee9

080047dc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4bac      	ldr	r3, [pc, #688]	; (8004ad0 <UART_SetConfig+0x2e0>)
 8004820:	4013      	ands	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6812      	ldr	r2, [r2, #0]
 8004826:	6939      	ldr	r1, [r7, #16]
 8004828:	430b      	orrs	r3, r1
 800482a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	430a      	orrs	r2, r1
 8004864:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a9a      	ldr	r2, [pc, #616]	; (8004ad4 <UART_SetConfig+0x2e4>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d121      	bne.n	80048b4 <UART_SetConfig+0xc4>
 8004870:	4b99      	ldr	r3, [pc, #612]	; (8004ad8 <UART_SetConfig+0x2e8>)
 8004872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	2b03      	cmp	r3, #3
 800487a:	d817      	bhi.n	80048ac <UART_SetConfig+0xbc>
 800487c:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <UART_SetConfig+0x94>)
 800487e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004882:	bf00      	nop
 8004884:	08004895 	.word	0x08004895
 8004888:	080048a1 	.word	0x080048a1
 800488c:	080048a7 	.word	0x080048a7
 8004890:	0800489b 	.word	0x0800489b
 8004894:	2301      	movs	r3, #1
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	e0b2      	b.n	8004a00 <UART_SetConfig+0x210>
 800489a:	2302      	movs	r3, #2
 800489c:	77fb      	strb	r3, [r7, #31]
 800489e:	e0af      	b.n	8004a00 <UART_SetConfig+0x210>
 80048a0:	2304      	movs	r3, #4
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e0ac      	b.n	8004a00 <UART_SetConfig+0x210>
 80048a6:	2308      	movs	r3, #8
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e0a9      	b.n	8004a00 <UART_SetConfig+0x210>
 80048ac:	2310      	movs	r3, #16
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	bf00      	nop
 80048b2:	e0a5      	b.n	8004a00 <UART_SetConfig+0x210>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a88      	ldr	r2, [pc, #544]	; (8004adc <UART_SetConfig+0x2ec>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d123      	bne.n	8004906 <UART_SetConfig+0x116>
 80048be:	4b86      	ldr	r3, [pc, #536]	; (8004ad8 <UART_SetConfig+0x2e8>)
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ca:	d012      	beq.n	80048f2 <UART_SetConfig+0x102>
 80048cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d0:	d802      	bhi.n	80048d8 <UART_SetConfig+0xe8>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d007      	beq.n	80048e6 <UART_SetConfig+0xf6>
 80048d6:	e012      	b.n	80048fe <UART_SetConfig+0x10e>
 80048d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048dc:	d00c      	beq.n	80048f8 <UART_SetConfig+0x108>
 80048de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80048e2:	d003      	beq.n	80048ec <UART_SetConfig+0xfc>
 80048e4:	e00b      	b.n	80048fe <UART_SetConfig+0x10e>
 80048e6:	2300      	movs	r3, #0
 80048e8:	77fb      	strb	r3, [r7, #31]
 80048ea:	e089      	b.n	8004a00 <UART_SetConfig+0x210>
 80048ec:	2302      	movs	r3, #2
 80048ee:	77fb      	strb	r3, [r7, #31]
 80048f0:	e086      	b.n	8004a00 <UART_SetConfig+0x210>
 80048f2:	2304      	movs	r3, #4
 80048f4:	77fb      	strb	r3, [r7, #31]
 80048f6:	e083      	b.n	8004a00 <UART_SetConfig+0x210>
 80048f8:	2308      	movs	r3, #8
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e080      	b.n	8004a00 <UART_SetConfig+0x210>
 80048fe:	2310      	movs	r3, #16
 8004900:	77fb      	strb	r3, [r7, #31]
 8004902:	bf00      	nop
 8004904:	e07c      	b.n	8004a00 <UART_SetConfig+0x210>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a75      	ldr	r2, [pc, #468]	; (8004ae0 <UART_SetConfig+0x2f0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d123      	bne.n	8004958 <UART_SetConfig+0x168>
 8004910:	4b71      	ldr	r3, [pc, #452]	; (8004ad8 <UART_SetConfig+0x2e8>)
 8004912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004914:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004918:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800491c:	d012      	beq.n	8004944 <UART_SetConfig+0x154>
 800491e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004922:	d802      	bhi.n	800492a <UART_SetConfig+0x13a>
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <UART_SetConfig+0x148>
 8004928:	e012      	b.n	8004950 <UART_SetConfig+0x160>
 800492a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800492e:	d00c      	beq.n	800494a <UART_SetConfig+0x15a>
 8004930:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004934:	d003      	beq.n	800493e <UART_SetConfig+0x14e>
 8004936:	e00b      	b.n	8004950 <UART_SetConfig+0x160>
 8004938:	2300      	movs	r3, #0
 800493a:	77fb      	strb	r3, [r7, #31]
 800493c:	e060      	b.n	8004a00 <UART_SetConfig+0x210>
 800493e:	2302      	movs	r3, #2
 8004940:	77fb      	strb	r3, [r7, #31]
 8004942:	e05d      	b.n	8004a00 <UART_SetConfig+0x210>
 8004944:	2304      	movs	r3, #4
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e05a      	b.n	8004a00 <UART_SetConfig+0x210>
 800494a:	2308      	movs	r3, #8
 800494c:	77fb      	strb	r3, [r7, #31]
 800494e:	e057      	b.n	8004a00 <UART_SetConfig+0x210>
 8004950:	2310      	movs	r3, #16
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	bf00      	nop
 8004956:	e053      	b.n	8004a00 <UART_SetConfig+0x210>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a61      	ldr	r2, [pc, #388]	; (8004ae4 <UART_SetConfig+0x2f4>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d123      	bne.n	80049aa <UART_SetConfig+0x1ba>
 8004962:	4b5d      	ldr	r3, [pc, #372]	; (8004ad8 <UART_SetConfig+0x2e8>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800496a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800496e:	d012      	beq.n	8004996 <UART_SetConfig+0x1a6>
 8004970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004974:	d802      	bhi.n	800497c <UART_SetConfig+0x18c>
 8004976:	2b00      	cmp	r3, #0
 8004978:	d007      	beq.n	800498a <UART_SetConfig+0x19a>
 800497a:	e012      	b.n	80049a2 <UART_SetConfig+0x1b2>
 800497c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004980:	d00c      	beq.n	800499c <UART_SetConfig+0x1ac>
 8004982:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004986:	d003      	beq.n	8004990 <UART_SetConfig+0x1a0>
 8004988:	e00b      	b.n	80049a2 <UART_SetConfig+0x1b2>
 800498a:	2300      	movs	r3, #0
 800498c:	77fb      	strb	r3, [r7, #31]
 800498e:	e037      	b.n	8004a00 <UART_SetConfig+0x210>
 8004990:	2302      	movs	r3, #2
 8004992:	77fb      	strb	r3, [r7, #31]
 8004994:	e034      	b.n	8004a00 <UART_SetConfig+0x210>
 8004996:	2304      	movs	r3, #4
 8004998:	77fb      	strb	r3, [r7, #31]
 800499a:	e031      	b.n	8004a00 <UART_SetConfig+0x210>
 800499c:	2308      	movs	r3, #8
 800499e:	77fb      	strb	r3, [r7, #31]
 80049a0:	e02e      	b.n	8004a00 <UART_SetConfig+0x210>
 80049a2:	2310      	movs	r3, #16
 80049a4:	77fb      	strb	r3, [r7, #31]
 80049a6:	bf00      	nop
 80049a8:	e02a      	b.n	8004a00 <UART_SetConfig+0x210>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a4e      	ldr	r2, [pc, #312]	; (8004ae8 <UART_SetConfig+0x2f8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d123      	bne.n	80049fc <UART_SetConfig+0x20c>
 80049b4:	4b48      	ldr	r3, [pc, #288]	; (8004ad8 <UART_SetConfig+0x2e8>)
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80049bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c0:	d012      	beq.n	80049e8 <UART_SetConfig+0x1f8>
 80049c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c6:	d802      	bhi.n	80049ce <UART_SetConfig+0x1de>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <UART_SetConfig+0x1ec>
 80049cc:	e012      	b.n	80049f4 <UART_SetConfig+0x204>
 80049ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049d2:	d00c      	beq.n	80049ee <UART_SetConfig+0x1fe>
 80049d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80049d8:	d003      	beq.n	80049e2 <UART_SetConfig+0x1f2>
 80049da:	e00b      	b.n	80049f4 <UART_SetConfig+0x204>
 80049dc:	2300      	movs	r3, #0
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e00e      	b.n	8004a00 <UART_SetConfig+0x210>
 80049e2:	2302      	movs	r3, #2
 80049e4:	77fb      	strb	r3, [r7, #31]
 80049e6:	e00b      	b.n	8004a00 <UART_SetConfig+0x210>
 80049e8:	2304      	movs	r3, #4
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e008      	b.n	8004a00 <UART_SetConfig+0x210>
 80049ee:	2308      	movs	r3, #8
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e005      	b.n	8004a00 <UART_SetConfig+0x210>
 80049f4:	2310      	movs	r3, #16
 80049f6:	77fb      	strb	r3, [r7, #31]
 80049f8:	bf00      	nop
 80049fa:	e001      	b.n	8004a00 <UART_SetConfig+0x210>
 80049fc:	2310      	movs	r3, #16
 80049fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a08:	f040 8090 	bne.w	8004b2c <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004a0c:	7ffb      	ldrb	r3, [r7, #31]
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d86c      	bhi.n	8004aec <UART_SetConfig+0x2fc>
 8004a12:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <UART_SetConfig+0x228>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a3d 	.word	0x08004a3d
 8004a1c:	08004a5d 	.word	0x08004a5d
 8004a20:	08004a7d 	.word	0x08004a7d
 8004a24:	08004aed 	.word	0x08004aed
 8004a28:	08004a99 	.word	0x08004a99
 8004a2c:	08004aed 	.word	0x08004aed
 8004a30:	08004aed 	.word	0x08004aed
 8004a34:	08004aed 	.word	0x08004aed
 8004a38:	08004ab9 	.word	0x08004ab9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a3c:	f7fe fae0 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8004a40:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	005a      	lsls	r2, r3, #1
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	085b      	lsrs	r3, r3, #1
 8004a4c:	441a      	add	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	61bb      	str	r3, [r7, #24]
        break;
 8004a5a:	e04a      	b.n	8004af2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a5c:	f7fe faf2 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 8004a60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	005a      	lsls	r2, r3, #1
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	441a      	add	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	61bb      	str	r3, [r7, #24]
        break;
 8004a7a:	e03a      	b.n	8004af2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	085b      	lsrs	r3, r3, #1
 8004a82:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004a86:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6852      	ldr	r2, [r2, #4]
 8004a8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	61bb      	str	r3, [r7, #24]
        break;
 8004a96:	e02c      	b.n	8004af2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a98:	f7fe fa3c 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 8004a9c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	005a      	lsls	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	085b      	lsrs	r3, r3, #1
 8004aa8:	441a      	add	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	61bb      	str	r3, [r7, #24]
        break;
 8004ab6:	e01c      	b.n	8004af2 <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	085b      	lsrs	r3, r3, #1
 8004abe:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	61bb      	str	r3, [r7, #24]
        break;
 8004ace:	e010      	b.n	8004af2 <UART_SetConfig+0x302>
 8004ad0:	efff69f3 	.word	0xefff69f3
 8004ad4:	40013800 	.word	0x40013800
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	40004400 	.word	0x40004400
 8004ae0:	40004800 	.word	0x40004800
 8004ae4:	40004c00 	.word	0x40004c00
 8004ae8:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	75fb      	strb	r3, [r7, #23]
        break;
 8004af0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b0f      	cmp	r3, #15
 8004af6:	d916      	bls.n	8004b26 <UART_SetConfig+0x336>
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004afe:	d212      	bcs.n	8004b26 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f023 030f 	bic.w	r3, r3, #15
 8004b08:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	085b      	lsrs	r3, r3, #1
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	897b      	ldrh	r3, [r7, #10]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	897a      	ldrh	r2, [r7, #10]
 8004b22:	60da      	str	r2, [r3, #12]
 8004b24:	e072      	b.n	8004c0c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	75fb      	strb	r3, [r7, #23]
 8004b2a:	e06f      	b.n	8004c0c <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8004b2c:	7ffb      	ldrb	r3, [r7, #31]
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d85b      	bhi.n	8004bea <UART_SetConfig+0x3fa>
 8004b32:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <UART_SetConfig+0x348>)
 8004b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b38:	08004b5d 	.word	0x08004b5d
 8004b3c:	08004b7b 	.word	0x08004b7b
 8004b40:	08004b99 	.word	0x08004b99
 8004b44:	08004beb 	.word	0x08004beb
 8004b48:	08004bb5 	.word	0x08004bb5
 8004b4c:	08004beb 	.word	0x08004beb
 8004b50:	08004beb 	.word	0x08004beb
 8004b54:	08004beb 	.word	0x08004beb
 8004b58:	08004bd3 	.word	0x08004bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b5c:	f7fe fa50 	bl	8003000 <HAL_RCC_GetPCLK1Freq>
 8004b60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	085a      	lsrs	r2, r3, #1
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	441a      	add	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	61bb      	str	r3, [r7, #24]
        break;
 8004b78:	e03a      	b.n	8004bf0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b7a:	f7fe fa63 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 8004b7e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	085a      	lsrs	r2, r3, #1
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	441a      	add	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	61bb      	str	r3, [r7, #24]
        break;
 8004b96:	e02b      	b.n	8004bf0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	085b      	lsrs	r3, r3, #1
 8004b9e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004ba2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6852      	ldr	r2, [r2, #4]
 8004baa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	61bb      	str	r3, [r7, #24]
        break;
 8004bb2:	e01d      	b.n	8004bf0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb4:	f7fe f9ae 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 8004bb8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	085a      	lsrs	r2, r3, #1
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	441a      	add	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	61bb      	str	r3, [r7, #24]
        break;
 8004bd0:	e00e      	b.n	8004bf0 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	085b      	lsrs	r3, r3, #1
 8004bd8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	61bb      	str	r3, [r7, #24]
        break;
 8004be8:	e002      	b.n	8004bf0 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	75fb      	strb	r3, [r7, #23]
        break;
 8004bee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	2b0f      	cmp	r3, #15
 8004bf4:	d908      	bls.n	8004c08 <UART_SetConfig+0x418>
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bfc:	d204      	bcs.n	8004c08 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	60da      	str	r2, [r3, #12]
 8004c06:	e001      	b.n	8004c0c <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3720      	adds	r7, #32
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop

08004c24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	430a      	orrs	r2, r1
 8004cd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01a      	beq.n	8004d3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d22:	d10a      	bne.n	8004d3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	605a      	str	r2, [r3, #4]
  }
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004d76:	f7fc fd69 	bl	800184c <HAL_GetTick>
 8004d7a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d10e      	bne.n	8004da8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f82a 	bl	8004df2 <UART_WaitOnFlagUntilTimeout>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e020      	b.n	8004dea <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0304 	and.w	r3, r3, #4
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d10e      	bne.n	8004dd4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004db6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dba:	9300      	str	r3, [sp, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f814 	bl	8004df2 <UART_WaitOnFlagUntilTimeout>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e00a      	b.n	8004dea <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b084      	sub	sp, #16
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	603b      	str	r3, [r7, #0]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e02:	e05d      	b.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0a:	d059      	beq.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0c:	f7fc fd1e 	bl	800184c <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d302      	bcc.n	8004e22 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d11b      	bne.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e30:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0201 	bic.w	r2, r2, #1
 8004e40:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e042      	b.n	8004ee0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d02b      	beq.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e76:	d123      	bne.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e80:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e90:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0201 	bic.w	r2, r2, #1
 8004ea0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e00f      	b.n	8004ee0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69da      	ldr	r2, [r3, #28]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	bf0c      	ite	eq
 8004ed0:	2301      	moveq	r3, #1
 8004ed2:	2300      	movne	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	79fb      	ldrb	r3, [r7, #7]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d092      	beq.n	8004e04 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ef6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004efc:	2b22      	cmp	r3, #34	; 0x22
 8004efe:	d13a      	bne.n	8004f76 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f06:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f08:	89bb      	ldrh	r3, [r7, #12]
 8004f0a:	b2d9      	uxtb	r1, r3
 8004f0c:	89fb      	ldrh	r3, [r7, #14]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f14:	400a      	ands	r2, r1
 8004f16:	b2d2      	uxtb	r2, r2
 8004f18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d121      	bne.n	8004f86 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f50:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff fc34 	bl	80047dc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f74:	e007      	b.n	8004f86 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	699a      	ldr	r2, [r3, #24]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f042 0208 	orr.w	r2, r2, #8
 8004f84:	619a      	str	r2, [r3, #24]
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f9c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fa2:	2b22      	cmp	r3, #34	; 0x22
 8004fa4:	d13a      	bne.n	800501c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004fac:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb2:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004fb4:	89ba      	ldrh	r2, [r7, #12]
 8004fb6:	89fb      	ldrh	r3, [r7, #14]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc4:	1c9a      	adds	r2, r3, #2
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d121      	bne.n	800502c <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ff6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689a      	ldr	r2, [r3, #8]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0201 	bic.w	r2, r2, #1
 8005006:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff fbe1 	bl	80047dc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800501a:	e007      	b.n	800502c <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699a      	ldr	r2, [r3, #24]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0208 	orr.w	r2, r2, #8
 800502a:	619a      	str	r2, [r3, #24]
}
 800502c:	bf00      	nop
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <__errno>:
 8005034:	4b01      	ldr	r3, [pc, #4]	; (800503c <__errno+0x8>)
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	2000000c 	.word	0x2000000c

08005040 <__libc_init_array>:
 8005040:	b570      	push	{r4, r5, r6, lr}
 8005042:	4e0d      	ldr	r6, [pc, #52]	; (8005078 <__libc_init_array+0x38>)
 8005044:	4c0d      	ldr	r4, [pc, #52]	; (800507c <__libc_init_array+0x3c>)
 8005046:	1ba4      	subs	r4, r4, r6
 8005048:	10a4      	asrs	r4, r4, #2
 800504a:	2500      	movs	r5, #0
 800504c:	42a5      	cmp	r5, r4
 800504e:	d109      	bne.n	8005064 <__libc_init_array+0x24>
 8005050:	4e0b      	ldr	r6, [pc, #44]	; (8005080 <__libc_init_array+0x40>)
 8005052:	4c0c      	ldr	r4, [pc, #48]	; (8005084 <__libc_init_array+0x44>)
 8005054:	f000 fd3c 	bl	8005ad0 <_init>
 8005058:	1ba4      	subs	r4, r4, r6
 800505a:	10a4      	asrs	r4, r4, #2
 800505c:	2500      	movs	r5, #0
 800505e:	42a5      	cmp	r5, r4
 8005060:	d105      	bne.n	800506e <__libc_init_array+0x2e>
 8005062:	bd70      	pop	{r4, r5, r6, pc}
 8005064:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005068:	4798      	blx	r3
 800506a:	3501      	adds	r5, #1
 800506c:	e7ee      	b.n	800504c <__libc_init_array+0xc>
 800506e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005072:	4798      	blx	r3
 8005074:	3501      	adds	r5, #1
 8005076:	e7f2      	b.n	800505e <__libc_init_array+0x1e>
 8005078:	08005b68 	.word	0x08005b68
 800507c:	08005b68 	.word	0x08005b68
 8005080:	08005b68 	.word	0x08005b68
 8005084:	08005b6c 	.word	0x08005b6c

08005088 <memset>:
 8005088:	4402      	add	r2, r0
 800508a:	4603      	mov	r3, r0
 800508c:	4293      	cmp	r3, r2
 800508e:	d100      	bne.n	8005092 <memset+0xa>
 8005090:	4770      	bx	lr
 8005092:	f803 1b01 	strb.w	r1, [r3], #1
 8005096:	e7f9      	b.n	800508c <memset+0x4>

08005098 <atan>:
 8005098:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509c:	ec55 4b10 	vmov	r4, r5, d0
 80050a0:	4bc3      	ldr	r3, [pc, #780]	; (80053b0 <atan+0x318>)
 80050a2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80050a6:	429e      	cmp	r6, r3
 80050a8:	46ab      	mov	fp, r5
 80050aa:	dd18      	ble.n	80050de <atan+0x46>
 80050ac:	4bc1      	ldr	r3, [pc, #772]	; (80053b4 <atan+0x31c>)
 80050ae:	429e      	cmp	r6, r3
 80050b0:	dc01      	bgt.n	80050b6 <atan+0x1e>
 80050b2:	d109      	bne.n	80050c8 <atan+0x30>
 80050b4:	b144      	cbz	r4, 80050c8 <atan+0x30>
 80050b6:	4622      	mov	r2, r4
 80050b8:	462b      	mov	r3, r5
 80050ba:	4620      	mov	r0, r4
 80050bc:	4629      	mov	r1, r5
 80050be:	f7fb f899 	bl	80001f4 <__adddf3>
 80050c2:	4604      	mov	r4, r0
 80050c4:	460d      	mov	r5, r1
 80050c6:	e006      	b.n	80050d6 <atan+0x3e>
 80050c8:	f1bb 0f00 	cmp.w	fp, #0
 80050cc:	f340 8131 	ble.w	8005332 <atan+0x29a>
 80050d0:	a59b      	add	r5, pc, #620	; (adr r5, 8005340 <atan+0x2a8>)
 80050d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80050d6:	ec45 4b10 	vmov	d0, r4, r5
 80050da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050de:	4bb6      	ldr	r3, [pc, #728]	; (80053b8 <atan+0x320>)
 80050e0:	429e      	cmp	r6, r3
 80050e2:	dc14      	bgt.n	800510e <atan+0x76>
 80050e4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80050e8:	429e      	cmp	r6, r3
 80050ea:	dc0d      	bgt.n	8005108 <atan+0x70>
 80050ec:	a396      	add	r3, pc, #600	; (adr r3, 8005348 <atan+0x2b0>)
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	ee10 0a10 	vmov	r0, s0
 80050f6:	4629      	mov	r1, r5
 80050f8:	f7fb f87c 	bl	80001f4 <__adddf3>
 80050fc:	2200      	movs	r2, #0
 80050fe:	4baf      	ldr	r3, [pc, #700]	; (80053bc <atan+0x324>)
 8005100:	f7fb fcbe 	bl	8000a80 <__aeabi_dcmpgt>
 8005104:	2800      	cmp	r0, #0
 8005106:	d1e6      	bne.n	80050d6 <atan+0x3e>
 8005108:	f04f 3aff 	mov.w	sl, #4294967295
 800510c:	e02b      	b.n	8005166 <atan+0xce>
 800510e:	f000 f963 	bl	80053d8 <fabs>
 8005112:	4bab      	ldr	r3, [pc, #684]	; (80053c0 <atan+0x328>)
 8005114:	429e      	cmp	r6, r3
 8005116:	ec55 4b10 	vmov	r4, r5, d0
 800511a:	f300 80bf 	bgt.w	800529c <atan+0x204>
 800511e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005122:	429e      	cmp	r6, r3
 8005124:	f300 80a0 	bgt.w	8005268 <atan+0x1d0>
 8005128:	ee10 2a10 	vmov	r2, s0
 800512c:	ee10 0a10 	vmov	r0, s0
 8005130:	462b      	mov	r3, r5
 8005132:	4629      	mov	r1, r5
 8005134:	f7fb f85e 	bl	80001f4 <__adddf3>
 8005138:	2200      	movs	r2, #0
 800513a:	4ba0      	ldr	r3, [pc, #640]	; (80053bc <atan+0x324>)
 800513c:	f7fb f858 	bl	80001f0 <__aeabi_dsub>
 8005140:	2200      	movs	r2, #0
 8005142:	4606      	mov	r6, r0
 8005144:	460f      	mov	r7, r1
 8005146:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800514a:	4620      	mov	r0, r4
 800514c:	4629      	mov	r1, r5
 800514e:	f7fb f851 	bl	80001f4 <__adddf3>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	4630      	mov	r0, r6
 8005158:	4639      	mov	r1, r7
 800515a:	f7fb fb2b 	bl	80007b4 <__aeabi_ddiv>
 800515e:	f04f 0a00 	mov.w	sl, #0
 8005162:	4604      	mov	r4, r0
 8005164:	460d      	mov	r5, r1
 8005166:	4622      	mov	r2, r4
 8005168:	462b      	mov	r3, r5
 800516a:	4620      	mov	r0, r4
 800516c:	4629      	mov	r1, r5
 800516e:	f7fb f9f7 	bl	8000560 <__aeabi_dmul>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4680      	mov	r8, r0
 8005178:	4689      	mov	r9, r1
 800517a:	f7fb f9f1 	bl	8000560 <__aeabi_dmul>
 800517e:	a374      	add	r3, pc, #464	; (adr r3, 8005350 <atan+0x2b8>)
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	4606      	mov	r6, r0
 8005186:	460f      	mov	r7, r1
 8005188:	f7fb f9ea 	bl	8000560 <__aeabi_dmul>
 800518c:	a372      	add	r3, pc, #456	; (adr r3, 8005358 <atan+0x2c0>)
 800518e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005192:	f7fb f82f 	bl	80001f4 <__adddf3>
 8005196:	4632      	mov	r2, r6
 8005198:	463b      	mov	r3, r7
 800519a:	f7fb f9e1 	bl	8000560 <__aeabi_dmul>
 800519e:	a370      	add	r3, pc, #448	; (adr r3, 8005360 <atan+0x2c8>)
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	f7fb f826 	bl	80001f4 <__adddf3>
 80051a8:	4632      	mov	r2, r6
 80051aa:	463b      	mov	r3, r7
 80051ac:	f7fb f9d8 	bl	8000560 <__aeabi_dmul>
 80051b0:	a36d      	add	r3, pc, #436	; (adr r3, 8005368 <atan+0x2d0>)
 80051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b6:	f7fb f81d 	bl	80001f4 <__adddf3>
 80051ba:	4632      	mov	r2, r6
 80051bc:	463b      	mov	r3, r7
 80051be:	f7fb f9cf 	bl	8000560 <__aeabi_dmul>
 80051c2:	a36b      	add	r3, pc, #428	; (adr r3, 8005370 <atan+0x2d8>)
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f7fb f814 	bl	80001f4 <__adddf3>
 80051cc:	4632      	mov	r2, r6
 80051ce:	463b      	mov	r3, r7
 80051d0:	f7fb f9c6 	bl	8000560 <__aeabi_dmul>
 80051d4:	a368      	add	r3, pc, #416	; (adr r3, 8005378 <atan+0x2e0>)
 80051d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051da:	f7fb f80b 	bl	80001f4 <__adddf3>
 80051de:	4642      	mov	r2, r8
 80051e0:	464b      	mov	r3, r9
 80051e2:	f7fb f9bd 	bl	8000560 <__aeabi_dmul>
 80051e6:	a366      	add	r3, pc, #408	; (adr r3, 8005380 <atan+0x2e8>)
 80051e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ec:	4680      	mov	r8, r0
 80051ee:	4689      	mov	r9, r1
 80051f0:	4630      	mov	r0, r6
 80051f2:	4639      	mov	r1, r7
 80051f4:	f7fb f9b4 	bl	8000560 <__aeabi_dmul>
 80051f8:	a363      	add	r3, pc, #396	; (adr r3, 8005388 <atan+0x2f0>)
 80051fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fe:	f7fa fff7 	bl	80001f0 <__aeabi_dsub>
 8005202:	4632      	mov	r2, r6
 8005204:	463b      	mov	r3, r7
 8005206:	f7fb f9ab 	bl	8000560 <__aeabi_dmul>
 800520a:	a361      	add	r3, pc, #388	; (adr r3, 8005390 <atan+0x2f8>)
 800520c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005210:	f7fa ffee 	bl	80001f0 <__aeabi_dsub>
 8005214:	4632      	mov	r2, r6
 8005216:	463b      	mov	r3, r7
 8005218:	f7fb f9a2 	bl	8000560 <__aeabi_dmul>
 800521c:	a35e      	add	r3, pc, #376	; (adr r3, 8005398 <atan+0x300>)
 800521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005222:	f7fa ffe5 	bl	80001f0 <__aeabi_dsub>
 8005226:	4632      	mov	r2, r6
 8005228:	463b      	mov	r3, r7
 800522a:	f7fb f999 	bl	8000560 <__aeabi_dmul>
 800522e:	a35c      	add	r3, pc, #368	; (adr r3, 80053a0 <atan+0x308>)
 8005230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005234:	f7fa ffdc 	bl	80001f0 <__aeabi_dsub>
 8005238:	4632      	mov	r2, r6
 800523a:	463b      	mov	r3, r7
 800523c:	f7fb f990 	bl	8000560 <__aeabi_dmul>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4640      	mov	r0, r8
 8005246:	4649      	mov	r1, r9
 8005248:	f7fa ffd4 	bl	80001f4 <__adddf3>
 800524c:	4622      	mov	r2, r4
 800524e:	462b      	mov	r3, r5
 8005250:	f7fb f986 	bl	8000560 <__aeabi_dmul>
 8005254:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	d14b      	bne.n	80052f6 <atan+0x25e>
 800525e:	4620      	mov	r0, r4
 8005260:	4629      	mov	r1, r5
 8005262:	f7fa ffc5 	bl	80001f0 <__aeabi_dsub>
 8005266:	e72c      	b.n	80050c2 <atan+0x2a>
 8005268:	ee10 0a10 	vmov	r0, s0
 800526c:	2200      	movs	r2, #0
 800526e:	4b53      	ldr	r3, [pc, #332]	; (80053bc <atan+0x324>)
 8005270:	4629      	mov	r1, r5
 8005272:	f7fa ffbd 	bl	80001f0 <__aeabi_dsub>
 8005276:	2200      	movs	r2, #0
 8005278:	4606      	mov	r6, r0
 800527a:	460f      	mov	r7, r1
 800527c:	4b4f      	ldr	r3, [pc, #316]	; (80053bc <atan+0x324>)
 800527e:	4620      	mov	r0, r4
 8005280:	4629      	mov	r1, r5
 8005282:	f7fa ffb7 	bl	80001f4 <__adddf3>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4630      	mov	r0, r6
 800528c:	4639      	mov	r1, r7
 800528e:	f7fb fa91 	bl	80007b4 <__aeabi_ddiv>
 8005292:	f04f 0a01 	mov.w	sl, #1
 8005296:	4604      	mov	r4, r0
 8005298:	460d      	mov	r5, r1
 800529a:	e764      	b.n	8005166 <atan+0xce>
 800529c:	4b49      	ldr	r3, [pc, #292]	; (80053c4 <atan+0x32c>)
 800529e:	429e      	cmp	r6, r3
 80052a0:	dc1d      	bgt.n	80052de <atan+0x246>
 80052a2:	ee10 0a10 	vmov	r0, s0
 80052a6:	2200      	movs	r2, #0
 80052a8:	4b47      	ldr	r3, [pc, #284]	; (80053c8 <atan+0x330>)
 80052aa:	4629      	mov	r1, r5
 80052ac:	f7fa ffa0 	bl	80001f0 <__aeabi_dsub>
 80052b0:	2200      	movs	r2, #0
 80052b2:	4606      	mov	r6, r0
 80052b4:	460f      	mov	r7, r1
 80052b6:	4b44      	ldr	r3, [pc, #272]	; (80053c8 <atan+0x330>)
 80052b8:	4620      	mov	r0, r4
 80052ba:	4629      	mov	r1, r5
 80052bc:	f7fb f950 	bl	8000560 <__aeabi_dmul>
 80052c0:	2200      	movs	r2, #0
 80052c2:	4b3e      	ldr	r3, [pc, #248]	; (80053bc <atan+0x324>)
 80052c4:	f7fa ff96 	bl	80001f4 <__adddf3>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4630      	mov	r0, r6
 80052ce:	4639      	mov	r1, r7
 80052d0:	f7fb fa70 	bl	80007b4 <__aeabi_ddiv>
 80052d4:	f04f 0a02 	mov.w	sl, #2
 80052d8:	4604      	mov	r4, r0
 80052da:	460d      	mov	r5, r1
 80052dc:	e743      	b.n	8005166 <atan+0xce>
 80052de:	462b      	mov	r3, r5
 80052e0:	ee10 2a10 	vmov	r2, s0
 80052e4:	2000      	movs	r0, #0
 80052e6:	4939      	ldr	r1, [pc, #228]	; (80053cc <atan+0x334>)
 80052e8:	f7fb fa64 	bl	80007b4 <__aeabi_ddiv>
 80052ec:	f04f 0a03 	mov.w	sl, #3
 80052f0:	4604      	mov	r4, r0
 80052f2:	460d      	mov	r5, r1
 80052f4:	e737      	b.n	8005166 <atan+0xce>
 80052f6:	4b36      	ldr	r3, [pc, #216]	; (80053d0 <atan+0x338>)
 80052f8:	4e36      	ldr	r6, [pc, #216]	; (80053d4 <atan+0x33c>)
 80052fa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80052fe:	4456      	add	r6, sl
 8005300:	449a      	add	sl, r3
 8005302:	e9da 2300 	ldrd	r2, r3, [sl]
 8005306:	f7fa ff73 	bl	80001f0 <__aeabi_dsub>
 800530a:	4622      	mov	r2, r4
 800530c:	462b      	mov	r3, r5
 800530e:	f7fa ff6f 	bl	80001f0 <__aeabi_dsub>
 8005312:	4602      	mov	r2, r0
 8005314:	460b      	mov	r3, r1
 8005316:	e9d6 0100 	ldrd	r0, r1, [r6]
 800531a:	f7fa ff69 	bl	80001f0 <__aeabi_dsub>
 800531e:	f1bb 0f00 	cmp.w	fp, #0
 8005322:	4604      	mov	r4, r0
 8005324:	460d      	mov	r5, r1
 8005326:	f6bf aed6 	bge.w	80050d6 <atan+0x3e>
 800532a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800532e:	461d      	mov	r5, r3
 8005330:	e6d1      	b.n	80050d6 <atan+0x3e>
 8005332:	a51d      	add	r5, pc, #116	; (adr r5, 80053a8 <atan+0x310>)
 8005334:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005338:	e6cd      	b.n	80050d6 <atan+0x3e>
 800533a:	bf00      	nop
 800533c:	f3af 8000 	nop.w
 8005340:	54442d18 	.word	0x54442d18
 8005344:	3ff921fb 	.word	0x3ff921fb
 8005348:	8800759c 	.word	0x8800759c
 800534c:	7e37e43c 	.word	0x7e37e43c
 8005350:	e322da11 	.word	0xe322da11
 8005354:	3f90ad3a 	.word	0x3f90ad3a
 8005358:	24760deb 	.word	0x24760deb
 800535c:	3fa97b4b 	.word	0x3fa97b4b
 8005360:	a0d03d51 	.word	0xa0d03d51
 8005364:	3fb10d66 	.word	0x3fb10d66
 8005368:	c54c206e 	.word	0xc54c206e
 800536c:	3fb745cd 	.word	0x3fb745cd
 8005370:	920083ff 	.word	0x920083ff
 8005374:	3fc24924 	.word	0x3fc24924
 8005378:	5555550d 	.word	0x5555550d
 800537c:	3fd55555 	.word	0x3fd55555
 8005380:	2c6a6c2f 	.word	0x2c6a6c2f
 8005384:	bfa2b444 	.word	0xbfa2b444
 8005388:	52defd9a 	.word	0x52defd9a
 800538c:	3fadde2d 	.word	0x3fadde2d
 8005390:	af749a6d 	.word	0xaf749a6d
 8005394:	3fb3b0f2 	.word	0x3fb3b0f2
 8005398:	fe231671 	.word	0xfe231671
 800539c:	3fbc71c6 	.word	0x3fbc71c6
 80053a0:	9998ebc4 	.word	0x9998ebc4
 80053a4:	3fc99999 	.word	0x3fc99999
 80053a8:	54442d18 	.word	0x54442d18
 80053ac:	bff921fb 	.word	0xbff921fb
 80053b0:	440fffff 	.word	0x440fffff
 80053b4:	7ff00000 	.word	0x7ff00000
 80053b8:	3fdbffff 	.word	0x3fdbffff
 80053bc:	3ff00000 	.word	0x3ff00000
 80053c0:	3ff2ffff 	.word	0x3ff2ffff
 80053c4:	40037fff 	.word	0x40037fff
 80053c8:	3ff80000 	.word	0x3ff80000
 80053cc:	bff00000 	.word	0xbff00000
 80053d0:	08005b40 	.word	0x08005b40
 80053d4:	08005b20 	.word	0x08005b20

080053d8 <fabs>:
 80053d8:	ec51 0b10 	vmov	r0, r1, d0
 80053dc:	ee10 2a10 	vmov	r2, s0
 80053e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80053e4:	ec43 2b10 	vmov	d0, r2, r3
 80053e8:	4770      	bx	lr
	...

080053ec <acos>:
 80053ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ee:	ed2d 8b02 	vpush	{d8}
 80053f2:	4e26      	ldr	r6, [pc, #152]	; (800548c <acos+0xa0>)
 80053f4:	b08b      	sub	sp, #44	; 0x2c
 80053f6:	ec55 4b10 	vmov	r4, r5, d0
 80053fa:	f000 f851 	bl	80054a0 <__ieee754_acos>
 80053fe:	f996 3000 	ldrsb.w	r3, [r6]
 8005402:	eeb0 8a40 	vmov.f32	s16, s0
 8005406:	eef0 8a60 	vmov.f32	s17, s1
 800540a:	3301      	adds	r3, #1
 800540c:	d036      	beq.n	800547c <acos+0x90>
 800540e:	4622      	mov	r2, r4
 8005410:	462b      	mov	r3, r5
 8005412:	4620      	mov	r0, r4
 8005414:	4629      	mov	r1, r5
 8005416:	f7fb fb3d 	bl	8000a94 <__aeabi_dcmpun>
 800541a:	4607      	mov	r7, r0
 800541c:	bb70      	cbnz	r0, 800547c <acos+0x90>
 800541e:	ec45 4b10 	vmov	d0, r4, r5
 8005422:	f7ff ffd9 	bl	80053d8 <fabs>
 8005426:	2200      	movs	r2, #0
 8005428:	4b19      	ldr	r3, [pc, #100]	; (8005490 <acos+0xa4>)
 800542a:	ec51 0b10 	vmov	r0, r1, d0
 800542e:	f7fb fb27 	bl	8000a80 <__aeabi_dcmpgt>
 8005432:	b318      	cbz	r0, 800547c <acos+0x90>
 8005434:	2301      	movs	r3, #1
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	4816      	ldr	r0, [pc, #88]	; (8005494 <acos+0xa8>)
 800543a:	4b17      	ldr	r3, [pc, #92]	; (8005498 <acos+0xac>)
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	9708      	str	r7, [sp, #32]
 8005440:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005444:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005448:	f000 fb3a 	bl	8005ac0 <nan>
 800544c:	f996 3000 	ldrsb.w	r3, [r6]
 8005450:	2b02      	cmp	r3, #2
 8005452:	ed8d 0b06 	vstr	d0, [sp, #24]
 8005456:	d104      	bne.n	8005462 <acos+0x76>
 8005458:	f7ff fdec 	bl	8005034 <__errno>
 800545c:	2321      	movs	r3, #33	; 0x21
 800545e:	6003      	str	r3, [r0, #0]
 8005460:	e004      	b.n	800546c <acos+0x80>
 8005462:	4668      	mov	r0, sp
 8005464:	f000 fb28 	bl	8005ab8 <matherr>
 8005468:	2800      	cmp	r0, #0
 800546a:	d0f5      	beq.n	8005458 <acos+0x6c>
 800546c:	9b08      	ldr	r3, [sp, #32]
 800546e:	b11b      	cbz	r3, 8005478 <acos+0x8c>
 8005470:	f7ff fde0 	bl	8005034 <__errno>
 8005474:	9b08      	ldr	r3, [sp, #32]
 8005476:	6003      	str	r3, [r0, #0]
 8005478:	ed9d 8b06 	vldr	d8, [sp, #24]
 800547c:	eeb0 0a48 	vmov.f32	s0, s16
 8005480:	eef0 0a68 	vmov.f32	s1, s17
 8005484:	b00b      	add	sp, #44	; 0x2c
 8005486:	ecbd 8b02 	vpop	{d8}
 800548a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800548c:	20000070 	.word	0x20000070
 8005490:	3ff00000 	.word	0x3ff00000
 8005494:	08005b64 	.word	0x08005b64
 8005498:	08005b60 	.word	0x08005b60
 800549c:	00000000 	.word	0x00000000

080054a0 <__ieee754_acos>:
 80054a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a4:	ec55 4b10 	vmov	r4, r5, d0
 80054a8:	49b7      	ldr	r1, [pc, #732]	; (8005788 <__ieee754_acos+0x2e8>)
 80054aa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80054ae:	428b      	cmp	r3, r1
 80054b0:	dd1b      	ble.n	80054ea <__ieee754_acos+0x4a>
 80054b2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 80054b6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80054ba:	4323      	orrs	r3, r4
 80054bc:	d109      	bne.n	80054d2 <__ieee754_acos+0x32>
 80054be:	2d00      	cmp	r5, #0
 80054c0:	f300 8211 	bgt.w	80058e6 <__ieee754_acos+0x446>
 80054c4:	a196      	add	r1, pc, #600	; (adr r1, 8005720 <__ieee754_acos+0x280>)
 80054c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054ca:	ec41 0b10 	vmov	d0, r0, r1
 80054ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054d2:	ee10 2a10 	vmov	r2, s0
 80054d6:	462b      	mov	r3, r5
 80054d8:	4620      	mov	r0, r4
 80054da:	4629      	mov	r1, r5
 80054dc:	f7fa fe88 	bl	80001f0 <__aeabi_dsub>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	f7fb f966 	bl	80007b4 <__aeabi_ddiv>
 80054e8:	e7ef      	b.n	80054ca <__ieee754_acos+0x2a>
 80054ea:	49a8      	ldr	r1, [pc, #672]	; (800578c <__ieee754_acos+0x2ec>)
 80054ec:	428b      	cmp	r3, r1
 80054ee:	f300 8087 	bgt.w	8005600 <__ieee754_acos+0x160>
 80054f2:	4aa7      	ldr	r2, [pc, #668]	; (8005790 <__ieee754_acos+0x2f0>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	f340 81f9 	ble.w	80058ec <__ieee754_acos+0x44c>
 80054fa:	ee10 2a10 	vmov	r2, s0
 80054fe:	ee10 0a10 	vmov	r0, s0
 8005502:	462b      	mov	r3, r5
 8005504:	4629      	mov	r1, r5
 8005506:	f7fb f82b 	bl	8000560 <__aeabi_dmul>
 800550a:	a387      	add	r3, pc, #540	; (adr r3, 8005728 <__ieee754_acos+0x288>)
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	4606      	mov	r6, r0
 8005512:	460f      	mov	r7, r1
 8005514:	f7fb f824 	bl	8000560 <__aeabi_dmul>
 8005518:	a385      	add	r3, pc, #532	; (adr r3, 8005730 <__ieee754_acos+0x290>)
 800551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551e:	f7fa fe69 	bl	80001f4 <__adddf3>
 8005522:	4632      	mov	r2, r6
 8005524:	463b      	mov	r3, r7
 8005526:	f7fb f81b 	bl	8000560 <__aeabi_dmul>
 800552a:	a383      	add	r3, pc, #524	; (adr r3, 8005738 <__ieee754_acos+0x298>)
 800552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005530:	f7fa fe5e 	bl	80001f0 <__aeabi_dsub>
 8005534:	4632      	mov	r2, r6
 8005536:	463b      	mov	r3, r7
 8005538:	f7fb f812 	bl	8000560 <__aeabi_dmul>
 800553c:	a380      	add	r3, pc, #512	; (adr r3, 8005740 <__ieee754_acos+0x2a0>)
 800553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005542:	f7fa fe57 	bl	80001f4 <__adddf3>
 8005546:	4632      	mov	r2, r6
 8005548:	463b      	mov	r3, r7
 800554a:	f7fb f809 	bl	8000560 <__aeabi_dmul>
 800554e:	a37e      	add	r3, pc, #504	; (adr r3, 8005748 <__ieee754_acos+0x2a8>)
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	f7fa fe4c 	bl	80001f0 <__aeabi_dsub>
 8005558:	4632      	mov	r2, r6
 800555a:	463b      	mov	r3, r7
 800555c:	f7fb f800 	bl	8000560 <__aeabi_dmul>
 8005560:	a37b      	add	r3, pc, #492	; (adr r3, 8005750 <__ieee754_acos+0x2b0>)
 8005562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005566:	f7fa fe45 	bl	80001f4 <__adddf3>
 800556a:	4632      	mov	r2, r6
 800556c:	463b      	mov	r3, r7
 800556e:	f7fa fff7 	bl	8000560 <__aeabi_dmul>
 8005572:	a379      	add	r3, pc, #484	; (adr r3, 8005758 <__ieee754_acos+0x2b8>)
 8005574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005578:	4680      	mov	r8, r0
 800557a:	4689      	mov	r9, r1
 800557c:	4630      	mov	r0, r6
 800557e:	4639      	mov	r1, r7
 8005580:	f7fa ffee 	bl	8000560 <__aeabi_dmul>
 8005584:	a376      	add	r3, pc, #472	; (adr r3, 8005760 <__ieee754_acos+0x2c0>)
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f7fa fe31 	bl	80001f0 <__aeabi_dsub>
 800558e:	4632      	mov	r2, r6
 8005590:	463b      	mov	r3, r7
 8005592:	f7fa ffe5 	bl	8000560 <__aeabi_dmul>
 8005596:	a374      	add	r3, pc, #464	; (adr r3, 8005768 <__ieee754_acos+0x2c8>)
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	f7fa fe2a 	bl	80001f4 <__adddf3>
 80055a0:	4632      	mov	r2, r6
 80055a2:	463b      	mov	r3, r7
 80055a4:	f7fa ffdc 	bl	8000560 <__aeabi_dmul>
 80055a8:	a371      	add	r3, pc, #452	; (adr r3, 8005770 <__ieee754_acos+0x2d0>)
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	f7fa fe1f 	bl	80001f0 <__aeabi_dsub>
 80055b2:	4632      	mov	r2, r6
 80055b4:	463b      	mov	r3, r7
 80055b6:	f7fa ffd3 	bl	8000560 <__aeabi_dmul>
 80055ba:	2200      	movs	r2, #0
 80055bc:	4b75      	ldr	r3, [pc, #468]	; (8005794 <__ieee754_acos+0x2f4>)
 80055be:	f7fa fe19 	bl	80001f4 <__adddf3>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4640      	mov	r0, r8
 80055c8:	4649      	mov	r1, r9
 80055ca:	f7fb f8f3 	bl	80007b4 <__aeabi_ddiv>
 80055ce:	4622      	mov	r2, r4
 80055d0:	462b      	mov	r3, r5
 80055d2:	f7fa ffc5 	bl	8000560 <__aeabi_dmul>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	a167      	add	r1, pc, #412	; (adr r1, 8005778 <__ieee754_acos+0x2d8>)
 80055dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055e0:	f7fa fe06 	bl	80001f0 <__aeabi_dsub>
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4620      	mov	r0, r4
 80055ea:	4629      	mov	r1, r5
 80055ec:	f7fa fe00 	bl	80001f0 <__aeabi_dsub>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	a162      	add	r1, pc, #392	; (adr r1, 8005780 <__ieee754_acos+0x2e0>)
 80055f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055fa:	f7fa fdf9 	bl	80001f0 <__aeabi_dsub>
 80055fe:	e764      	b.n	80054ca <__ieee754_acos+0x2a>
 8005600:	2d00      	cmp	r5, #0
 8005602:	f280 80cb 	bge.w	800579c <__ieee754_acos+0x2fc>
 8005606:	ee10 0a10 	vmov	r0, s0
 800560a:	2200      	movs	r2, #0
 800560c:	4b61      	ldr	r3, [pc, #388]	; (8005794 <__ieee754_acos+0x2f4>)
 800560e:	4629      	mov	r1, r5
 8005610:	f7fa fdf0 	bl	80001f4 <__adddf3>
 8005614:	2200      	movs	r2, #0
 8005616:	4b60      	ldr	r3, [pc, #384]	; (8005798 <__ieee754_acos+0x2f8>)
 8005618:	f7fa ffa2 	bl	8000560 <__aeabi_dmul>
 800561c:	a342      	add	r3, pc, #264	; (adr r3, 8005728 <__ieee754_acos+0x288>)
 800561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005622:	4604      	mov	r4, r0
 8005624:	460d      	mov	r5, r1
 8005626:	f7fa ff9b 	bl	8000560 <__aeabi_dmul>
 800562a:	a341      	add	r3, pc, #260	; (adr r3, 8005730 <__ieee754_acos+0x290>)
 800562c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005630:	f7fa fde0 	bl	80001f4 <__adddf3>
 8005634:	4622      	mov	r2, r4
 8005636:	462b      	mov	r3, r5
 8005638:	f7fa ff92 	bl	8000560 <__aeabi_dmul>
 800563c:	a33e      	add	r3, pc, #248	; (adr r3, 8005738 <__ieee754_acos+0x298>)
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f7fa fdd5 	bl	80001f0 <__aeabi_dsub>
 8005646:	4622      	mov	r2, r4
 8005648:	462b      	mov	r3, r5
 800564a:	f7fa ff89 	bl	8000560 <__aeabi_dmul>
 800564e:	a33c      	add	r3, pc, #240	; (adr r3, 8005740 <__ieee754_acos+0x2a0>)
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	f7fa fdce 	bl	80001f4 <__adddf3>
 8005658:	4622      	mov	r2, r4
 800565a:	462b      	mov	r3, r5
 800565c:	f7fa ff80 	bl	8000560 <__aeabi_dmul>
 8005660:	a339      	add	r3, pc, #228	; (adr r3, 8005748 <__ieee754_acos+0x2a8>)
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	f7fa fdc3 	bl	80001f0 <__aeabi_dsub>
 800566a:	4622      	mov	r2, r4
 800566c:	462b      	mov	r3, r5
 800566e:	f7fa ff77 	bl	8000560 <__aeabi_dmul>
 8005672:	a337      	add	r3, pc, #220	; (adr r3, 8005750 <__ieee754_acos+0x2b0>)
 8005674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005678:	f7fa fdbc 	bl	80001f4 <__adddf3>
 800567c:	4622      	mov	r2, r4
 800567e:	462b      	mov	r3, r5
 8005680:	f7fa ff6e 	bl	8000560 <__aeabi_dmul>
 8005684:	ec45 4b10 	vmov	d0, r4, r5
 8005688:	4680      	mov	r8, r0
 800568a:	4689      	mov	r9, r1
 800568c:	f000 f964 	bl	8005958 <__ieee754_sqrt>
 8005690:	a331      	add	r3, pc, #196	; (adr r3, 8005758 <__ieee754_acos+0x2b8>)
 8005692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005696:	4620      	mov	r0, r4
 8005698:	4629      	mov	r1, r5
 800569a:	ec57 6b10 	vmov	r6, r7, d0
 800569e:	f7fa ff5f 	bl	8000560 <__aeabi_dmul>
 80056a2:	a32f      	add	r3, pc, #188	; (adr r3, 8005760 <__ieee754_acos+0x2c0>)
 80056a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a8:	f7fa fda2 	bl	80001f0 <__aeabi_dsub>
 80056ac:	4622      	mov	r2, r4
 80056ae:	462b      	mov	r3, r5
 80056b0:	f7fa ff56 	bl	8000560 <__aeabi_dmul>
 80056b4:	a32c      	add	r3, pc, #176	; (adr r3, 8005768 <__ieee754_acos+0x2c8>)
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	f7fa fd9b 	bl	80001f4 <__adddf3>
 80056be:	4622      	mov	r2, r4
 80056c0:	462b      	mov	r3, r5
 80056c2:	f7fa ff4d 	bl	8000560 <__aeabi_dmul>
 80056c6:	a32a      	add	r3, pc, #168	; (adr r3, 8005770 <__ieee754_acos+0x2d0>)
 80056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056cc:	f7fa fd90 	bl	80001f0 <__aeabi_dsub>
 80056d0:	4622      	mov	r2, r4
 80056d2:	462b      	mov	r3, r5
 80056d4:	f7fa ff44 	bl	8000560 <__aeabi_dmul>
 80056d8:	2200      	movs	r2, #0
 80056da:	4b2e      	ldr	r3, [pc, #184]	; (8005794 <__ieee754_acos+0x2f4>)
 80056dc:	f7fa fd8a 	bl	80001f4 <__adddf3>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4640      	mov	r0, r8
 80056e6:	4649      	mov	r1, r9
 80056e8:	f7fb f864 	bl	80007b4 <__aeabi_ddiv>
 80056ec:	4632      	mov	r2, r6
 80056ee:	463b      	mov	r3, r7
 80056f0:	f7fa ff36 	bl	8000560 <__aeabi_dmul>
 80056f4:	a320      	add	r3, pc, #128	; (adr r3, 8005778 <__ieee754_acos+0x2d8>)
 80056f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fa:	f7fa fd79 	bl	80001f0 <__aeabi_dsub>
 80056fe:	4632      	mov	r2, r6
 8005700:	463b      	mov	r3, r7
 8005702:	f7fa fd77 	bl	80001f4 <__adddf3>
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	f7fa fd73 	bl	80001f4 <__adddf3>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	a103      	add	r1, pc, #12	; (adr r1, 8005720 <__ieee754_acos+0x280>)
 8005714:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005718:	e76f      	b.n	80055fa <__ieee754_acos+0x15a>
 800571a:	bf00      	nop
 800571c:	f3af 8000 	nop.w
 8005720:	54442d18 	.word	0x54442d18
 8005724:	400921fb 	.word	0x400921fb
 8005728:	0dfdf709 	.word	0x0dfdf709
 800572c:	3f023de1 	.word	0x3f023de1
 8005730:	7501b288 	.word	0x7501b288
 8005734:	3f49efe0 	.word	0x3f49efe0
 8005738:	b5688f3b 	.word	0xb5688f3b
 800573c:	3fa48228 	.word	0x3fa48228
 8005740:	0e884455 	.word	0x0e884455
 8005744:	3fc9c155 	.word	0x3fc9c155
 8005748:	03eb6f7d 	.word	0x03eb6f7d
 800574c:	3fd4d612 	.word	0x3fd4d612
 8005750:	55555555 	.word	0x55555555
 8005754:	3fc55555 	.word	0x3fc55555
 8005758:	b12e9282 	.word	0xb12e9282
 800575c:	3fb3b8c5 	.word	0x3fb3b8c5
 8005760:	1b8d0159 	.word	0x1b8d0159
 8005764:	3fe6066c 	.word	0x3fe6066c
 8005768:	9c598ac8 	.word	0x9c598ac8
 800576c:	40002ae5 	.word	0x40002ae5
 8005770:	1c8a2d4b 	.word	0x1c8a2d4b
 8005774:	40033a27 	.word	0x40033a27
 8005778:	33145c07 	.word	0x33145c07
 800577c:	3c91a626 	.word	0x3c91a626
 8005780:	54442d18 	.word	0x54442d18
 8005784:	3ff921fb 	.word	0x3ff921fb
 8005788:	3fefffff 	.word	0x3fefffff
 800578c:	3fdfffff 	.word	0x3fdfffff
 8005790:	3c600000 	.word	0x3c600000
 8005794:	3ff00000 	.word	0x3ff00000
 8005798:	3fe00000 	.word	0x3fe00000
 800579c:	ee10 2a10 	vmov	r2, s0
 80057a0:	462b      	mov	r3, r5
 80057a2:	2000      	movs	r0, #0
 80057a4:	496a      	ldr	r1, [pc, #424]	; (8005950 <__ieee754_acos+0x4b0>)
 80057a6:	f7fa fd23 	bl	80001f0 <__aeabi_dsub>
 80057aa:	2200      	movs	r2, #0
 80057ac:	4b69      	ldr	r3, [pc, #420]	; (8005954 <__ieee754_acos+0x4b4>)
 80057ae:	f7fa fed7 	bl	8000560 <__aeabi_dmul>
 80057b2:	4604      	mov	r4, r0
 80057b4:	460d      	mov	r5, r1
 80057b6:	ec45 4b10 	vmov	d0, r4, r5
 80057ba:	f000 f8cd 	bl	8005958 <__ieee754_sqrt>
 80057be:	a34e      	add	r3, pc, #312	; (adr r3, 80058f8 <__ieee754_acos+0x458>)
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	4620      	mov	r0, r4
 80057c6:	4629      	mov	r1, r5
 80057c8:	ec59 8b10 	vmov	r8, r9, d0
 80057cc:	f7fa fec8 	bl	8000560 <__aeabi_dmul>
 80057d0:	a34b      	add	r3, pc, #300	; (adr r3, 8005900 <__ieee754_acos+0x460>)
 80057d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d6:	f7fa fd0d 	bl	80001f4 <__adddf3>
 80057da:	4622      	mov	r2, r4
 80057dc:	462b      	mov	r3, r5
 80057de:	f7fa febf 	bl	8000560 <__aeabi_dmul>
 80057e2:	a349      	add	r3, pc, #292	; (adr r3, 8005908 <__ieee754_acos+0x468>)
 80057e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e8:	f7fa fd02 	bl	80001f0 <__aeabi_dsub>
 80057ec:	4622      	mov	r2, r4
 80057ee:	462b      	mov	r3, r5
 80057f0:	f7fa feb6 	bl	8000560 <__aeabi_dmul>
 80057f4:	a346      	add	r3, pc, #280	; (adr r3, 8005910 <__ieee754_acos+0x470>)
 80057f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fa:	f7fa fcfb 	bl	80001f4 <__adddf3>
 80057fe:	4622      	mov	r2, r4
 8005800:	462b      	mov	r3, r5
 8005802:	f7fa fead 	bl	8000560 <__aeabi_dmul>
 8005806:	a344      	add	r3, pc, #272	; (adr r3, 8005918 <__ieee754_acos+0x478>)
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f7fa fcf0 	bl	80001f0 <__aeabi_dsub>
 8005810:	4622      	mov	r2, r4
 8005812:	462b      	mov	r3, r5
 8005814:	f7fa fea4 	bl	8000560 <__aeabi_dmul>
 8005818:	a341      	add	r3, pc, #260	; (adr r3, 8005920 <__ieee754_acos+0x480>)
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f7fa fce9 	bl	80001f4 <__adddf3>
 8005822:	4622      	mov	r2, r4
 8005824:	462b      	mov	r3, r5
 8005826:	f7fa fe9b 	bl	8000560 <__aeabi_dmul>
 800582a:	a33f      	add	r3, pc, #252	; (adr r3, 8005928 <__ieee754_acos+0x488>)
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	4682      	mov	sl, r0
 8005832:	468b      	mov	fp, r1
 8005834:	4620      	mov	r0, r4
 8005836:	4629      	mov	r1, r5
 8005838:	f7fa fe92 	bl	8000560 <__aeabi_dmul>
 800583c:	a33c      	add	r3, pc, #240	; (adr r3, 8005930 <__ieee754_acos+0x490>)
 800583e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005842:	f7fa fcd5 	bl	80001f0 <__aeabi_dsub>
 8005846:	4622      	mov	r2, r4
 8005848:	462b      	mov	r3, r5
 800584a:	f7fa fe89 	bl	8000560 <__aeabi_dmul>
 800584e:	a33a      	add	r3, pc, #232	; (adr r3, 8005938 <__ieee754_acos+0x498>)
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f7fa fcce 	bl	80001f4 <__adddf3>
 8005858:	4622      	mov	r2, r4
 800585a:	462b      	mov	r3, r5
 800585c:	f7fa fe80 	bl	8000560 <__aeabi_dmul>
 8005860:	a337      	add	r3, pc, #220	; (adr r3, 8005940 <__ieee754_acos+0x4a0>)
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	f7fa fcc3 	bl	80001f0 <__aeabi_dsub>
 800586a:	4622      	mov	r2, r4
 800586c:	462b      	mov	r3, r5
 800586e:	f7fa fe77 	bl	8000560 <__aeabi_dmul>
 8005872:	2200      	movs	r2, #0
 8005874:	4b36      	ldr	r3, [pc, #216]	; (8005950 <__ieee754_acos+0x4b0>)
 8005876:	f7fa fcbd 	bl	80001f4 <__adddf3>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4650      	mov	r0, sl
 8005880:	4659      	mov	r1, fp
 8005882:	f7fa ff97 	bl	80007b4 <__aeabi_ddiv>
 8005886:	4642      	mov	r2, r8
 8005888:	464b      	mov	r3, r9
 800588a:	f7fa fe69 	bl	8000560 <__aeabi_dmul>
 800588e:	2600      	movs	r6, #0
 8005890:	4682      	mov	sl, r0
 8005892:	468b      	mov	fp, r1
 8005894:	4632      	mov	r2, r6
 8005896:	464b      	mov	r3, r9
 8005898:	4630      	mov	r0, r6
 800589a:	4649      	mov	r1, r9
 800589c:	f7fa fe60 	bl	8000560 <__aeabi_dmul>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4620      	mov	r0, r4
 80058a6:	4629      	mov	r1, r5
 80058a8:	f7fa fca2 	bl	80001f0 <__aeabi_dsub>
 80058ac:	4632      	mov	r2, r6
 80058ae:	4604      	mov	r4, r0
 80058b0:	460d      	mov	r5, r1
 80058b2:	464b      	mov	r3, r9
 80058b4:	4640      	mov	r0, r8
 80058b6:	4649      	mov	r1, r9
 80058b8:	f7fa fc9c 	bl	80001f4 <__adddf3>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4620      	mov	r0, r4
 80058c2:	4629      	mov	r1, r5
 80058c4:	f7fa ff76 	bl	80007b4 <__aeabi_ddiv>
 80058c8:	4602      	mov	r2, r0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4650      	mov	r0, sl
 80058ce:	4659      	mov	r1, fp
 80058d0:	f7fa fc90 	bl	80001f4 <__adddf3>
 80058d4:	4632      	mov	r2, r6
 80058d6:	464b      	mov	r3, r9
 80058d8:	f7fa fc8c 	bl	80001f4 <__adddf3>
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	f7fa fc88 	bl	80001f4 <__adddf3>
 80058e4:	e5f1      	b.n	80054ca <__ieee754_acos+0x2a>
 80058e6:	2000      	movs	r0, #0
 80058e8:	2100      	movs	r1, #0
 80058ea:	e5ee      	b.n	80054ca <__ieee754_acos+0x2a>
 80058ec:	a116      	add	r1, pc, #88	; (adr r1, 8005948 <__ieee754_acos+0x4a8>)
 80058ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058f2:	e5ea      	b.n	80054ca <__ieee754_acos+0x2a>
 80058f4:	f3af 8000 	nop.w
 80058f8:	0dfdf709 	.word	0x0dfdf709
 80058fc:	3f023de1 	.word	0x3f023de1
 8005900:	7501b288 	.word	0x7501b288
 8005904:	3f49efe0 	.word	0x3f49efe0
 8005908:	b5688f3b 	.word	0xb5688f3b
 800590c:	3fa48228 	.word	0x3fa48228
 8005910:	0e884455 	.word	0x0e884455
 8005914:	3fc9c155 	.word	0x3fc9c155
 8005918:	03eb6f7d 	.word	0x03eb6f7d
 800591c:	3fd4d612 	.word	0x3fd4d612
 8005920:	55555555 	.word	0x55555555
 8005924:	3fc55555 	.word	0x3fc55555
 8005928:	b12e9282 	.word	0xb12e9282
 800592c:	3fb3b8c5 	.word	0x3fb3b8c5
 8005930:	1b8d0159 	.word	0x1b8d0159
 8005934:	3fe6066c 	.word	0x3fe6066c
 8005938:	9c598ac8 	.word	0x9c598ac8
 800593c:	40002ae5 	.word	0x40002ae5
 8005940:	1c8a2d4b 	.word	0x1c8a2d4b
 8005944:	40033a27 	.word	0x40033a27
 8005948:	54442d18 	.word	0x54442d18
 800594c:	3ff921fb 	.word	0x3ff921fb
 8005950:	3ff00000 	.word	0x3ff00000
 8005954:	3fe00000 	.word	0x3fe00000

08005958 <__ieee754_sqrt>:
 8005958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800595c:	4955      	ldr	r1, [pc, #340]	; (8005ab4 <__ieee754_sqrt+0x15c>)
 800595e:	ec55 4b10 	vmov	r4, r5, d0
 8005962:	43a9      	bics	r1, r5
 8005964:	462b      	mov	r3, r5
 8005966:	462a      	mov	r2, r5
 8005968:	d112      	bne.n	8005990 <__ieee754_sqrt+0x38>
 800596a:	ee10 2a10 	vmov	r2, s0
 800596e:	ee10 0a10 	vmov	r0, s0
 8005972:	4629      	mov	r1, r5
 8005974:	f7fa fdf4 	bl	8000560 <__aeabi_dmul>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4620      	mov	r0, r4
 800597e:	4629      	mov	r1, r5
 8005980:	f7fa fc38 	bl	80001f4 <__adddf3>
 8005984:	4604      	mov	r4, r0
 8005986:	460d      	mov	r5, r1
 8005988:	ec45 4b10 	vmov	d0, r4, r5
 800598c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005990:	2d00      	cmp	r5, #0
 8005992:	ee10 0a10 	vmov	r0, s0
 8005996:	4621      	mov	r1, r4
 8005998:	dc0f      	bgt.n	80059ba <__ieee754_sqrt+0x62>
 800599a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800599e:	4330      	orrs	r0, r6
 80059a0:	d0f2      	beq.n	8005988 <__ieee754_sqrt+0x30>
 80059a2:	b155      	cbz	r5, 80059ba <__ieee754_sqrt+0x62>
 80059a4:	ee10 2a10 	vmov	r2, s0
 80059a8:	4620      	mov	r0, r4
 80059aa:	4629      	mov	r1, r5
 80059ac:	f7fa fc20 	bl	80001f0 <__aeabi_dsub>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	f7fa fefe 	bl	80007b4 <__aeabi_ddiv>
 80059b8:	e7e4      	b.n	8005984 <__ieee754_sqrt+0x2c>
 80059ba:	151b      	asrs	r3, r3, #20
 80059bc:	d073      	beq.n	8005aa6 <__ieee754_sqrt+0x14e>
 80059be:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80059c2:	07dd      	lsls	r5, r3, #31
 80059c4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80059c8:	bf48      	it	mi
 80059ca:	0fc8      	lsrmi	r0, r1, #31
 80059cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80059d0:	bf44      	itt	mi
 80059d2:	0049      	lslmi	r1, r1, #1
 80059d4:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80059d8:	2500      	movs	r5, #0
 80059da:	1058      	asrs	r0, r3, #1
 80059dc:	0fcb      	lsrs	r3, r1, #31
 80059de:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80059e2:	0049      	lsls	r1, r1, #1
 80059e4:	2316      	movs	r3, #22
 80059e6:	462c      	mov	r4, r5
 80059e8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80059ec:	19a7      	adds	r7, r4, r6
 80059ee:	4297      	cmp	r7, r2
 80059f0:	bfde      	ittt	le
 80059f2:	19bc      	addle	r4, r7, r6
 80059f4:	1bd2      	suble	r2, r2, r7
 80059f6:	19ad      	addle	r5, r5, r6
 80059f8:	0fcf      	lsrs	r7, r1, #31
 80059fa:	3b01      	subs	r3, #1
 80059fc:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005a00:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005a04:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005a08:	d1f0      	bne.n	80059ec <__ieee754_sqrt+0x94>
 8005a0a:	f04f 0c20 	mov.w	ip, #32
 8005a0e:	469e      	mov	lr, r3
 8005a10:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005a14:	42a2      	cmp	r2, r4
 8005a16:	eb06 070e 	add.w	r7, r6, lr
 8005a1a:	dc02      	bgt.n	8005a22 <__ieee754_sqrt+0xca>
 8005a1c:	d112      	bne.n	8005a44 <__ieee754_sqrt+0xec>
 8005a1e:	428f      	cmp	r7, r1
 8005a20:	d810      	bhi.n	8005a44 <__ieee754_sqrt+0xec>
 8005a22:	2f00      	cmp	r7, #0
 8005a24:	eb07 0e06 	add.w	lr, r7, r6
 8005a28:	da42      	bge.n	8005ab0 <__ieee754_sqrt+0x158>
 8005a2a:	f1be 0f00 	cmp.w	lr, #0
 8005a2e:	db3f      	blt.n	8005ab0 <__ieee754_sqrt+0x158>
 8005a30:	f104 0801 	add.w	r8, r4, #1
 8005a34:	1b12      	subs	r2, r2, r4
 8005a36:	428f      	cmp	r7, r1
 8005a38:	bf88      	it	hi
 8005a3a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005a3e:	1bc9      	subs	r1, r1, r7
 8005a40:	4433      	add	r3, r6
 8005a42:	4644      	mov	r4, r8
 8005a44:	0052      	lsls	r2, r2, #1
 8005a46:	f1bc 0c01 	subs.w	ip, ip, #1
 8005a4a:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005a4e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005a52:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005a56:	d1dd      	bne.n	8005a14 <__ieee754_sqrt+0xbc>
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	d006      	beq.n	8005a6a <__ieee754_sqrt+0x112>
 8005a5c:	1c5c      	adds	r4, r3, #1
 8005a5e:	bf13      	iteet	ne
 8005a60:	3301      	addne	r3, #1
 8005a62:	3501      	addeq	r5, #1
 8005a64:	4663      	moveq	r3, ip
 8005a66:	f023 0301 	bicne.w	r3, r3, #1
 8005a6a:	106a      	asrs	r2, r5, #1
 8005a6c:	085b      	lsrs	r3, r3, #1
 8005a6e:	07e9      	lsls	r1, r5, #31
 8005a70:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005a74:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005a78:	bf48      	it	mi
 8005a7a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005a7e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005a82:	461c      	mov	r4, r3
 8005a84:	e780      	b.n	8005988 <__ieee754_sqrt+0x30>
 8005a86:	0aca      	lsrs	r2, r1, #11
 8005a88:	3815      	subs	r0, #21
 8005a8a:	0549      	lsls	r1, r1, #21
 8005a8c:	2a00      	cmp	r2, #0
 8005a8e:	d0fa      	beq.n	8005a86 <__ieee754_sqrt+0x12e>
 8005a90:	02d6      	lsls	r6, r2, #11
 8005a92:	d50a      	bpl.n	8005aaa <__ieee754_sqrt+0x152>
 8005a94:	f1c3 0420 	rsb	r4, r3, #32
 8005a98:	fa21 f404 	lsr.w	r4, r1, r4
 8005a9c:	1e5d      	subs	r5, r3, #1
 8005a9e:	4099      	lsls	r1, r3
 8005aa0:	4322      	orrs	r2, r4
 8005aa2:	1b43      	subs	r3, r0, r5
 8005aa4:	e78b      	b.n	80059be <__ieee754_sqrt+0x66>
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	e7f0      	b.n	8005a8c <__ieee754_sqrt+0x134>
 8005aaa:	0052      	lsls	r2, r2, #1
 8005aac:	3301      	adds	r3, #1
 8005aae:	e7ef      	b.n	8005a90 <__ieee754_sqrt+0x138>
 8005ab0:	46a0      	mov	r8, r4
 8005ab2:	e7bf      	b.n	8005a34 <__ieee754_sqrt+0xdc>
 8005ab4:	7ff00000 	.word	0x7ff00000

08005ab8 <matherr>:
 8005ab8:	2000      	movs	r0, #0
 8005aba:	4770      	bx	lr
 8005abc:	0000      	movs	r0, r0
	...

08005ac0 <nan>:
 8005ac0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005ac8 <nan+0x8>
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	00000000 	.word	0x00000000
 8005acc:	7ff80000 	.word	0x7ff80000

08005ad0 <_init>:
 8005ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad2:	bf00      	nop
 8005ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad6:	bc08      	pop	{r3}
 8005ad8:	469e      	mov	lr, r3
 8005ada:	4770      	bx	lr

08005adc <_fini>:
 8005adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ade:	bf00      	nop
 8005ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ae2:	bc08      	pop	{r3}
 8005ae4:	469e      	mov	lr, r3
 8005ae6:	4770      	bx	lr
